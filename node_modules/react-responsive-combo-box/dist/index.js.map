{"version":3,"file":"index.js","sources":["../src/reducer/focusReducer.ts","../src/index.tsx"],"sourcesContent":["type FocusStateType = {\n  isFocus: boolean\n  focusIndex: number\n}\n\ntype Action =\n  | { type: 'setFocusIndex'; focusIndex: number }\n  | { type: 'toggleFocus'; isFocus: boolean }\n\nconst initialState: FocusStateType = {\n  isFocus: false,\n  focusIndex: -1\n}\n\nconst focusReducer = (state: FocusStateType, action: Action) => {\n  switch (action.type) {\n    case 'setFocusIndex':\n      return { ...state, focusIndex: action.focusIndex }\n    case 'toggleFocus':\n      return { ...state, isFocus: action.isFocus }\n    default:\n      return state\n  }\n}\n\nexport { initialState, focusReducer }\n","import React, { useState, useRef, useEffect, useReducer } from 'react'\n\nimport { initialState, focusReducer } from './reducer/focusReducer'\nimport styles from './index.css'\n\ntype ComboBoxProps = {\n  options: string[]\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void\n  defaultValue?: string\n  placeholder?: string\n  onSelect?: (option: string) => void\n  onOptionsChange?: (option: string) => void\n  optionsListMaxHeight?: number\n  renderOptions?: (option: string) => React.ReactNode\n  style?: React.CSSProperties\n  className?: string\n  focusColor?: string\n  enableAutocomplete?: boolean\n  inputStyles?: React.CSSProperties\n  name?: string\n  onBlur?: (event?: React.ChangeEvent<HTMLInputElement>) => void\n  editable?: boolean\n}\n\nconst UP_ARROW = 38\nconst DOWN_ARROW = 40\nconst ENTER_KEY = 13\nconst ESCAPE_KEY = 27\n\nconst ComboBox: React.FC<ComboBoxProps> = ({\n  options: comboBoxOptions,\n  onChange,\n  defaultValue,\n  placeholder,\n  onSelect,\n  onOptionsChange,\n  optionsListMaxHeight,\n  renderOptions,\n  style,\n  className,\n  focusColor,\n  enableAutocomplete,\n  inputStyles,\n  name,\n  onBlur,\n  editable = true\n}) => {\n  const optionMaxHeight = optionsListMaxHeight || 200\n  let suggestionListPositionStyles: React.CSSProperties = {}\n\n  // Function that will check whether the defaultIndex falls inside the length of the options\n  // or else it will return -1\n\n  const [options, setOptions] = useState<string[]>(comboBoxOptions)\n  const [inputValue, setInputValue] = useState(defaultValue || '')\n  const [state, dispatch] = useReducer(focusReducer, initialState)\n  const { isFocus, focusIndex } = state\n  const [isMouseInsideOptions, setIsMouseInsideOptions] = useState(false) // This is used to determine whether the mouse cursor is inside or outside options container\n  const [IsOptionsPositionedTop, setIsOptionsPositionedTop] = useState(false)\n\n  const optionsContainerRef = useRef<HTMLDivElement | null>(null)\n  const optionRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    if (!isFocus) setInputValue(defaultValue || '')\n    dispatch({\n      type: 'setFocusIndex',\n      focusIndex: defaultValue ? options.indexOf(defaultValue.toString()) : -1\n    })\n  }, [defaultValue])\n\n  useEffect(() => {\n    // Position the options container top or bottom based on the space available\n    const optionsContainerElement: any = optionsContainerRef.current\n\n    const offsetBottom =\n      window.innerHeight -\n      optionsContainerElement?.offsetParent?.getBoundingClientRect().top\n\n    if (\n      optionMaxHeight > offsetBottom &&\n      optionsContainerElement?.offsetParent?.getBoundingClientRect().top >\n        offsetBottom\n    ) {\n      setIsOptionsPositionedTop(true)\n    } else {\n      setIsOptionsPositionedTop(false)\n    }\n  }, [isFocus])\n\n  if (IsOptionsPositionedTop)\n    suggestionListPositionStyles = {\n      bottom: '100%',\n      marginBottom: '5px'\n    }\n  else\n    suggestionListPositionStyles = {\n      top: '100%',\n      marginTop: '5px'\n    }\n\n  const blurHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (!isMouseInsideOptions) dispatch({ type: 'toggleFocus', isFocus: false })\n    if (onBlur) onBlur(event)\n  }\n\n  const updateValue = (index: number = focusIndex) => {\n    if (index !== -1) {\n      setInputValue(options[index])\n      if (onOptionsChange) onOptionsChange(options[index])\n    }\n  }\n\n  // While searching, the options are filtered and the index also changed.\n  // So the focus index is set to original based on all the options.\n  const resetFocusIndex = () => {\n    comboBoxOptions.forEach((option: string, index: number) => {\n      if (option === options[focusIndex])\n        dispatch({\n          type: 'setFocusIndex',\n          focusIndex: index\n        })\n    })\n  }\n\n  const selectSuggestionHandler = () => {\n    updateValue()\n    dispatch({ type: 'toggleFocus', isFocus: false })\n    resetFocusIndex()\n    setOptions(comboBoxOptions)\n\n    if (onSelect) onSelect(options[focusIndex])\n  }\n\n  const keyHandler = (event: any) => {\n    const optionsContainerElement: any = optionsContainerRef.current\n    const optionElement: any = optionRef.current\n    let newFocusIndex = focusIndex\n\n    switch (event.keyCode) {\n      case DOWN_ARROW: {\n        event.preventDefault()\n\n        // set the focus to true if the options list was not opened.\n        // Also set the scroll top\n        if (!isFocus) {\n          dispatch({ type: 'toggleFocus', isFocus: true })\n          if (optionElement && optionsContainerElement)\n            optionsContainerElement.scrollTop =\n              optionElement.offsetTop - optionElement.offsetHeight\n        } else {\n          // If the focus reaches the end of the options in the list, set the focus to 0\n\n          if (focusIndex >= options.length - 1) {\n            newFocusIndex = 0\n            optionsContainerElement.scrollTop = 0\n          }\n          // Change the scroll position based on the selected option position\n          else {\n            newFocusIndex = focusIndex + 1\n            if (optionElement && optionsContainerElement) {\n              const optionPosition =\n                optionElement.offsetTop + optionElement.offsetHeight\n\n              const optionsContainerPosition =\n                optionsContainerElement.clientHeight +\n                optionsContainerElement.scrollTop -\n                optionElement.offsetHeight\n\n              // Measured the option position with the suggestion height\n              // changed the scroll top if the option reached the end of the options container height\n\n              if (optionPosition >= optionsContainerPosition) {\n                optionsContainerElement.scrollTop += optionElement.offsetHeight\n              }\n            }\n          }\n        }\n        dispatch({\n          type: 'setFocusIndex',\n          focusIndex: newFocusIndex\n        })\n\n        if (onOptionsChange) onOptionsChange(options[newFocusIndex])\n        optionsContainerRef.current = optionsContainerElement\n        break\n      }\n      case UP_ARROW: {\n        event.preventDefault()\n\n        // set the focus to true if the options list was not opened.\n        if (!isFocus) {\n          dispatch({ type: 'toggleFocus', isFocus: true })\n          if (optionElement && optionsContainerElement)\n            optionsContainerElement.scrollTop =\n              optionElement.offsetTop - optionElement.offsetHeight\n        } else {\n          // If the focus falls beyond the start of the options in the list, set the focus to height of the suggestion-list\n          if (focusIndex <= 0) {\n            newFocusIndex = options.length - 1\n\n            if (optionsContainerElement)\n              optionsContainerElement.scrollTop =\n                optionsContainerElement.scrollHeight\n          } else {\n            newFocusIndex = focusIndex - 1\n\n            // Measured the option position with the suggestion height\n            // changed the scroll top if the option reached the start of the options container height\n            if (optionElement && optionsContainerElement) {\n              const optionPosition =\n                optionElement.offsetTop - optionElement.offsetHeight\n              if (optionPosition <= optionsContainerElement.scrollTop) {\n                optionsContainerElement.scrollTop -= optionElement.offsetHeight\n              }\n            }\n          }\n        }\n        dispatch({\n          type: 'setFocusIndex',\n          focusIndex: newFocusIndex\n        })\n\n        if (onOptionsChange) onOptionsChange(options[newFocusIndex])\n        optionsContainerRef.current = optionsContainerElement\n        break\n      }\n      case ENTER_KEY: {\n        if (focusIndex > -1 && focusIndex < options.length)\n          selectSuggestionHandler()\n\n        break\n      }\n      case ESCAPE_KEY: {\n        event.target.blur()\n        dispatch({ type: 'toggleFocus', isFocus: false })\n        break\n      }\n    }\n  }\n\n  const filterSuggestion = (filterText: string) => {\n    if (filterText.length === 0) setOptions(comboBoxOptions)\n    else {\n      const filteredSuggestion = comboBoxOptions.filter((option) => {\n        return option.toLowerCase().indexOf(filterText.toLowerCase()) !== -1\n      })\n      setOptions(filteredSuggestion)\n    }\n  }\n\n  const inputChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (onChange) onChange(event)\n    setInputValue(event.target.value)\n    if (enableAutocomplete) filterSuggestion(event.target.value)\n  }\n\n  const inputClickHandler = () => {\n    dispatch({\n      type: 'toggleFocus',\n      isFocus: true\n    })\n    dispatch({\n      type: 'setFocusIndex',\n      focusIndex: options.indexOf(inputValue.toString())\n    })\n  }\n\n  const focusHandler = () => {\n    const optionsContainerElement: any = optionsContainerRef.current\n    const optionElement: any = optionRef.current\n\n    optionsContainerElement.scrollTop = optionElement?.offsetTop\n    dispatch({ type: 'toggleFocus', isFocus: true })\n  }\n\n  const mouseEnterHandler = (index: number) => {\n    dispatch({ type: 'setFocusIndex', focusIndex: index })\n    if (onOptionsChange) onOptionsChange(options[index])\n  }\n\n  return (\n    <div className={styles.comboBox} style={style}>\n      <input\n        onFocus={focusHandler}\n        onChange={inputChangeHandler}\n        placeholder={placeholder || ''}\n        onKeyDown={keyHandler}\n        value={inputValue}\n        className={styles.comboBoxInput}\n        onBlur={blurHandler}\n        name={name}\n        style={{ ...inputStyles, cursor: editable ? 'text' : 'default' }}\n        readOnly={!editable}\n        onClick={inputClickHandler}\n      />\n      <div\n        className={styles.comboBoxPopover}\n        style={{\n          opacity: isFocus ? 1 : 0,\n          visibility: isFocus ? 'visible' : 'hidden',\n          ...suggestionListPositionStyles\n        }}\n        ref={optionsContainerRef}\n        onMouseEnter={() => setIsMouseInsideOptions(true)}\n        onMouseLeave={() => setIsMouseInsideOptions(false)}\n      >\n        <div\n          className={styles.comboBoxList}\n          style={{ maxHeight: isFocus ? optionMaxHeight : 0 }}\n        >\n          {options.map((option, index) => {\n            return (\n              <div\n                className={\n                  className\n                    ? `${styles.comboBoxOption} ${className}`\n                    : styles.comboBoxOption\n                }\n                key={option}\n                ref={index === focusIndex ? optionRef : null}\n                style={{\n                  backgroundColor:\n                    index === focusIndex\n                      ? focusColor || 'rgba(155,155,155,0.15)'\n                      : 'white',\n                  fontWeight: index === focusIndex ? 'bold' : 'normal'\n                }}\n                onClick={() => selectSuggestionHandler()}\n                onMouseDown={(e) => e.preventDefault()}\n                onMouseEnter={() => mouseEnterHandler(index)}\n              >\n                {renderOptions ? renderOptions(option) : option}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComboBox\n"],"names":["initialState","isFocus","focusIndex","focusReducer","state","action","type","UP_ARROW","DOWN_ARROW","ENTER_KEY","ESCAPE_KEY","ComboBox","comboBoxOptions","options","onChange","defaultValue","placeholder","onSelect","onOptionsChange","optionsListMaxHeight","renderOptions","style","className","focusColor","enableAutocomplete","inputStyles","name","onBlur","editable","optionMaxHeight","suggestionListPositionStyles","useState","setOptions","inputValue","setInputValue","useReducer","dispatch","isMouseInsideOptions","setIsMouseInsideOptions","IsOptionsPositionedTop","setIsOptionsPositionedTop","optionsContainerRef","useRef","optionRef","useEffect","indexOf","toString","optionsContainerElement","current","offsetBottom","window","innerHeight","offsetParent","getBoundingClientRect","top","bottom","marginBottom","marginTop","blurHandler","event","updateValue","index","resetFocusIndex","forEach","option","selectSuggestionHandler","keyHandler","optionElement","newFocusIndex","keyCode","preventDefault","scrollTop","offsetTop","offsetHeight","length","optionPosition","optionsContainerPosition","clientHeight","scrollHeight","target","blur","filterSuggestion","filterText","filteredSuggestion","filter","toLowerCase","inputChangeHandler","value","inputClickHandler","focusHandler","mouseEnterHandler","React","styles","comboBox","onFocus","onKeyDown","comboBoxInput","cursor","readOnly","onClick","comboBoxPopover","opacity","visibility","ref","onMouseEnter","onMouseLeave","comboBoxList","maxHeight","map","comboBoxOption","key","backgroundColor","fontWeight","onMouseDown","e"],"mappings":"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"}