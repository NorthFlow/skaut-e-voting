{"version":3,"file":"index.umd.js","sources":["../src/reducer/focusReducer.ts","../src/index.tsx"],"sourcesContent":["type FocusStateType = {\n  isFocus: boolean\n  focusIndex: number\n}\n\ntype Action =\n  | { type: 'setFocusIndex'; focusIndex: number }\n  | { type: 'toggleFocus'; isFocus: boolean }\n\nconst initialState: FocusStateType = {\n  isFocus: false,\n  focusIndex: -1\n}\n\nconst focusReducer = (state: FocusStateType, action: Action) => {\n  switch (action.type) {\n    case 'setFocusIndex':\n      return { ...state, focusIndex: action.focusIndex }\n    case 'toggleFocus':\n      return { ...state, isFocus: action.isFocus }\n    default:\n      return state\n  }\n}\n\nexport { initialState, focusReducer }\n","import React, { useState, useRef, useEffect, useReducer } from 'react'\n\nimport { initialState, focusReducer } from './reducer/focusReducer'\nimport styles from './style.css'\n\ntype ComboBoxProps = {\n  options: string[]\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void\n  defaultValue?: string\n  placeholder?: string\n  onSelect?: (option: string) => void\n  onOptionsChange?: (option: string) => void\n  optionsListMaxHeight?: number\n  renderOptions?: (option: string) => React.ReactNode\n  style?: React.CSSProperties\n  className?: string\n  focusColor?: string\n  enableAutocomplete?: boolean\n}\n\nconst UP_ARROW = 38\nconst DOWN_ARROW = 40\nconst ENTER_KEY = 13\nconst ESCAPE_KEY = 27\n\nconst ComboBox: React.FC<ComboBoxProps> = ({\n  options: comboBoxOptions,\n  onChange,\n  defaultValue,\n  placeholder,\n  onSelect,\n  onOptionsChange,\n  optionsListMaxHeight,\n  renderOptions,\n  style,\n  className,\n  focusColor,\n  enableAutocomplete\n}) => {\n  const optionMaxHeight = optionsListMaxHeight || 200\n  let suggestionListPositionStyles: React.CSSProperties = {\n    top: '100%',\n    marginTop: '5px'\n  }\n\n  // Function that will check whether the defaultIndex falls inside the length of the options\n  // or else it will return -1\n\n  const [options, setOptions] = useState<string[]>(comboBoxOptions)\n  const [inputValue, setInputValue] = useState(defaultValue || '')\n  const [state, dispatch] = useReducer(focusReducer, initialState)\n  const { isFocus, focusIndex } = state\n  const [isMouseInsideOptions, setIsMouseInsideOptions] = useState(false) // This is used to determine whether the mouse cursor is inside or outside options container\n\n  const optionsContainerRef = useRef<HTMLDivElement | null>(null)\n  const optionRef = useRef<HTMLDivElement>(null)\n\n  // Position the options container top or bottom based on the space available\n  const optionsContainerElement: any = optionsContainerRef.current\n\n  const offsetBottom =\n    window.innerHeight - optionsContainerElement?.offsetParent?.offsetTop\n\n  if (optionsContainerElement?.offsetParent?.offsetTop > offsetBottom) {\n    suggestionListPositionStyles = {\n      bottom: '100%',\n      marginBottom: '5px'\n    }\n  }\n\n  // Set the default index when the component is mounted\n  useEffect(() => {\n    dispatch({\n      type: 'setFocusIndex',\n      focusIndex: defaultValue ? options.indexOf(defaultValue) : -1\n    })\n  }, [])\n\n  const blurHandler = () => {\n    if (!isMouseInsideOptions) dispatch({ type: 'toggleFocus', isFocus: false })\n  }\n\n  const updateValue = (index: number = focusIndex) => {\n    if (index !== -1) {\n      setInputValue(options[index])\n      if (onOptionsChange) onOptionsChange(options[index])\n    }\n  }\n\n  // While searching, the options are filtered and the index also changed.\n  // So the focus index is set to original based on all the options.\n  const resetFocusIndex = () => {\n    comboBoxOptions.forEach((option: string, index: number) => {\n      if (option === options[focusIndex])\n        dispatch({\n          type: 'setFocusIndex',\n          focusIndex: index\n        })\n    })\n  }\n\n  const selectSuggestionHandler = () => {\n    updateValue()\n    dispatch({ type: 'toggleFocus', isFocus: false })\n    resetFocusIndex()\n    setOptions(comboBoxOptions)\n\n    if (onSelect) onSelect(options[focusIndex])\n  }\n\n  const keyHandler = (event: any) => {\n    const optionsContainerElement: any = optionsContainerRef.current\n    const optionElement: any = optionRef.current\n    let newFocusIndex = focusIndex\n\n    switch (event.keyCode) {\n      case DOWN_ARROW: {\n        // set the focus to true if the options list was not opened.\n        // Also set the scroll top\n        if (!isFocus) {\n          dispatch({ type: 'toggleFocus', isFocus: true })\n          if (optionElement && optionsContainerElement)\n            optionsContainerElement.scrollTop =\n              optionElement.offsetTop - optionElement.offsetHeight\n        } else {\n          // If the focus reaches the end of the options in the list, set the focus to 0\n\n          if (focusIndex >= options.length - 1) {\n            newFocusIndex = 0\n            optionsContainerElement.scrollTop = 0\n          }\n          // Change the scroll position based on the selected option position\n          else {\n            newFocusIndex = focusIndex + 1\n            if (optionElement && optionsContainerElement) {\n              const optionPosition =\n                optionElement.offsetTop + optionElement.offsetHeight\n\n              const optionsContainerPosition =\n                optionsContainerElement.clientHeight +\n                optionsContainerElement.scrollTop -\n                optionElement.offsetHeight\n\n              // Measured the option position with the suggestion height\n              // changed the scroll top if the option reached the end of the options container height\n\n              if (optionPosition >= optionsContainerPosition) {\n                optionsContainerElement.scrollTop += optionElement.offsetHeight\n              }\n            }\n          }\n        }\n        dispatch({\n          type: 'setFocusIndex',\n          focusIndex: newFocusIndex\n        })\n\n        if (onOptionsChange) onOptionsChange(options[newFocusIndex])\n        optionsContainerRef.current = optionsContainerElement\n        break\n      }\n      case UP_ARROW: {\n        // set the focus to true if the options list was not opened.\n        if (!isFocus) {\n          dispatch({ type: 'toggleFocus', isFocus: true })\n          if (optionElement && optionsContainerElement)\n            optionsContainerElement.scrollTop =\n              optionElement.offsetTop - optionElement.offsetHeight\n        } else {\n          // If the focus falls beyond the start of the options in the list, set the focus to height of the suggestion-list\n          if (focusIndex <= 0) {\n            newFocusIndex = options.length - 1\n\n            if (optionsContainerElement)\n              optionsContainerElement.scrollTop =\n                optionsContainerElement.scrollHeight\n          } else {\n            newFocusIndex = focusIndex - 1\n\n            // Measured the option position with the suggestion height\n            // changed the scroll top if the option reached the start of the options container height\n            if (optionElement && optionsContainerElement) {\n              const optionPosition =\n                optionElement.offsetTop - optionElement.offsetHeight\n              if (optionPosition <= optionsContainerElement.scrollTop) {\n                optionsContainerElement.scrollTop -= optionElement.offsetHeight\n              }\n            }\n          }\n        }\n        dispatch({\n          type: 'setFocusIndex',\n          focusIndex: newFocusIndex\n        })\n\n        if (onOptionsChange) onOptionsChange(options[newFocusIndex])\n        optionsContainerRef.current = optionsContainerElement\n        break\n      }\n      case ENTER_KEY: {\n        if (focusIndex > -1 && focusIndex < options.length)\n          selectSuggestionHandler()\n\n        break\n      }\n      case ESCAPE_KEY: {\n        event.target.blur()\n        dispatch({ type: 'toggleFocus', isFocus: false })\n        break\n      }\n    }\n  }\n\n  const filterSuggestion = (filterText: string) => {\n    if (filterText.length === 0) setOptions(comboBoxOptions)\n    else {\n      const filteredSuggestion = comboBoxOptions.filter((option) => {\n        return option.toLowerCase().indexOf(filterText.toLowerCase()) !== -1\n      })\n      setOptions(filteredSuggestion)\n    }\n  }\n\n  const inputChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (onChange) onChange(event)\n    setInputValue(event.target.value)\n    if (enableAutocomplete) filterSuggestion(event.target.value)\n  }\n\n  return (\n    <div className={styles.comboBox} style={style}>\n      <input\n        onFocus={() => dispatch({ type: 'toggleFocus', isFocus: true })}\n        onChange={inputChangeHandler}\n        placeholder={placeholder || ''}\n        onKeyDown={keyHandler}\n        value={inputValue}\n        className={styles.comboBoxInput}\n        onBlur={blurHandler}\n      />\n\n      <div\n        className={styles.comboBoxPopover}\n        style={{\n          opacity: isFocus ? 1 : 0,\n          visibility: isFocus ? 'visible' : 'hidden',\n          ...suggestionListPositionStyles\n        }}\n        ref={optionsContainerRef}\n        onMouseEnter={() => setIsMouseInsideOptions(true)}\n        onMouseLeave={() => setIsMouseInsideOptions(false)}\n      >\n        <div\n          className={styles.comboBoxList}\n          style={{ maxHeight: isFocus ? optionMaxHeight : 0 }}\n        >\n          {options.map((option, index) => {\n            return (\n              <div\n                className={\n                  className\n                    ? `${styles.comboBoxOption} ${className}`\n                    : styles.comboBoxOption\n                }\n                key={option}\n                ref={index === focusIndex ? optionRef : null}\n                style={{\n                  backgroundColor:\n                    index === focusIndex\n                      ? focusColor || 'rgba(155,155,155,0.15)'\n                      : 'white'\n                }}\n                onClick={selectSuggestionHandler}\n                onMouseEnter={() =>\n                  dispatch({ type: 'setFocusIndex', focusIndex: index })\n                }\n              >\n                {renderOptions ? renderOptions(option) : option}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComboBox\n"],"names":["initialState","isFocus","focusIndex","focusReducer","state","action","type","comboBoxOptions","options","onChange","defaultValue","placeholder","onSelect","onOptionsChange","renderOptions","style","className","focusColor","enableAutocomplete","optionMaxHeight","optionsListMaxHeight","suggestionListPositionStyles","top","marginTop","useState","setOptions","inputValue","setInputValue","useReducer","dispatch","isMouseInsideOptions","setIsMouseInsideOptions","optionsContainerRef","useRef","optionRef","optionsContainerElement","current","offsetBottom","window","innerHeight","offsetParent","_optionsContainerElem","offsetTop","bottom","marginBottom","useEffect","indexOf","selectSuggestionHandler","index","forEach","option","React","onFocus","event","target","value","filterText","length","filteredSuggestion","filter","toLowerCase","filterSuggestion","onKeyDown","optionElement","newFocusIndex","keyCode","scrollTop","offsetHeight","clientHeight","scrollHeight","blur","onBlur","opacity","visibility","ref","onMouseEnter","onMouseLeave","maxHeight","map","styles","key","backgroundColor","onClick"],"mappings":"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"}