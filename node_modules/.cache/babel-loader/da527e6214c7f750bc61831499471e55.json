{"ast":null,"code":"import React, { useState, useReducer, useRef, useEffect } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar initialState = {\n  isFocus: false,\n  focusIndex: -1\n};\n\nvar focusReducer = function focusReducer(state, action) {\n  switch (action.type) {\n    case 'setFocusIndex':\n      return _extends({}, state, {\n        focusIndex: action.focusIndex\n      });\n\n    case 'toggleFocus':\n      return _extends({}, state, {\n        isFocus: action.isFocus\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar styles = {\n  \"comboBox\": \"_3tcyg\",\n  \"comboBoxInput\": \"_3LDgJ\",\n  \"comboBoxPopover\": \"_WbEAz\",\n  \"comboBoxList\": \"_r3jpc\",\n  \"comboBoxOption\": \"_2iQTD\"\n};\nvar UP_ARROW = 38;\nvar DOWN_ARROW = 40;\nvar ENTER_KEY = 13;\nvar ESCAPE_KEY = 27;\n\nvar ComboBox = function ComboBox(_ref) {\n  var comboBoxOptions = _ref.options,\n      onChange = _ref.onChange,\n      defaultValue = _ref.defaultValue,\n      placeholder = _ref.placeholder,\n      onSelect = _ref.onSelect,\n      onOptionsChange = _ref.onOptionsChange,\n      optionsListMaxHeight = _ref.optionsListMaxHeight,\n      renderOptions = _ref.renderOptions,\n      style = _ref.style,\n      className = _ref.className,\n      focusColor = _ref.focusColor,\n      enableAutocomplete = _ref.enableAutocomplete,\n      inputStyles = _ref.inputStyles,\n      name = _ref.name,\n      onBlur = _ref.onBlur,\n      _ref$editable = _ref.editable,\n      editable = _ref$editable === void 0 ? true : _ref$editable;\n  var optionMaxHeight = optionsListMaxHeight || 200;\n  var suggestionListPositionStyles = {};\n\n  var _useState = useState(comboBoxOptions),\n      options = _useState[0],\n      setOptions = _useState[1];\n\n  var _useState2 = useState(defaultValue || ''),\n      inputValue = _useState2[0],\n      setInputValue = _useState2[1];\n\n  var _useReducer = useReducer(focusReducer, initialState),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  var isFocus = state.isFocus,\n      focusIndex = state.focusIndex;\n\n  var _useState3 = useState(false),\n      isMouseInsideOptions = _useState3[0],\n      setIsMouseInsideOptions = _useState3[1];\n\n  var _useState4 = useState(false),\n      IsOptionsPositionedTop = _useState4[0],\n      setIsOptionsPositionedTop = _useState4[1];\n\n  var optionsContainerRef = useRef(null);\n  var optionRef = useRef(null);\n  useEffect(function () {\n    if (!isFocus) setInputValue(defaultValue || '');\n    dispatch({\n      type: 'setFocusIndex',\n      focusIndex: defaultValue ? options.indexOf(defaultValue.toString()) : -1\n    });\n  }, [defaultValue]);\n  useEffect(function () {\n    var _optionsContainerElem, _optionsContainerElem2;\n\n    var optionsContainerElement = optionsContainerRef.current;\n    var offsetBottom = window.innerHeight - (optionsContainerElement === null || optionsContainerElement === void 0 ? void 0 : (_optionsContainerElem = optionsContainerElement.offsetParent) === null || _optionsContainerElem === void 0 ? void 0 : _optionsContainerElem.getBoundingClientRect().top);\n\n    if (optionMaxHeight > offsetBottom && (optionsContainerElement === null || optionsContainerElement === void 0 ? void 0 : (_optionsContainerElem2 = optionsContainerElement.offsetParent) === null || _optionsContainerElem2 === void 0 ? void 0 : _optionsContainerElem2.getBoundingClientRect().top) > offsetBottom) {\n      setIsOptionsPositionedTop(true);\n    } else {\n      setIsOptionsPositionedTop(false);\n    }\n  }, [isFocus]);\n  if (IsOptionsPositionedTop) suggestionListPositionStyles = {\n    bottom: '100%',\n    marginBottom: '5px'\n  };else suggestionListPositionStyles = {\n    top: '100%',\n    marginTop: '5px'\n  };\n\n  var blurHandler = function blurHandler(event) {\n    if (!isMouseInsideOptions) dispatch({\n      type: 'toggleFocus',\n      isFocus: false\n    });\n    if (onBlur) onBlur(event);\n  };\n\n  var updateValue = function updateValue(index) {\n    if (index === void 0) {\n      index = focusIndex;\n    }\n\n    if (index !== -1) {\n      setInputValue(options[index]);\n      if (onOptionsChange) onOptionsChange(options[index]);\n    }\n  };\n\n  var resetFocusIndex = function resetFocusIndex() {\n    comboBoxOptions.forEach(function (option, index) {\n      if (option === options[focusIndex]) dispatch({\n        type: 'setFocusIndex',\n        focusIndex: index\n      });\n    });\n  };\n\n  var selectSuggestionHandler = function selectSuggestionHandler() {\n    updateValue();\n    dispatch({\n      type: 'toggleFocus',\n      isFocus: false\n    });\n    resetFocusIndex();\n    setOptions(comboBoxOptions);\n    if (onSelect) onSelect(options[focusIndex]);\n  };\n\n  var keyHandler = function keyHandler(event) {\n    var optionsContainerElement = optionsContainerRef.current;\n    var optionElement = optionRef.current;\n    var newFocusIndex = focusIndex;\n\n    switch (event.keyCode) {\n      case DOWN_ARROW:\n        {\n          event.preventDefault();\n\n          if (!isFocus) {\n            dispatch({\n              type: 'toggleFocus',\n              isFocus: true\n            });\n            if (optionElement && optionsContainerElement) optionsContainerElement.scrollTop = optionElement.offsetTop - optionElement.offsetHeight;\n          } else {\n            if (focusIndex >= options.length - 1) {\n              newFocusIndex = 0;\n              optionsContainerElement.scrollTop = 0;\n            } else {\n              newFocusIndex = focusIndex + 1;\n\n              if (optionElement && optionsContainerElement) {\n                var optionPosition = optionElement.offsetTop + optionElement.offsetHeight;\n                var optionsContainerPosition = optionsContainerElement.clientHeight + optionsContainerElement.scrollTop - optionElement.offsetHeight;\n\n                if (optionPosition >= optionsContainerPosition) {\n                  optionsContainerElement.scrollTop += optionElement.offsetHeight;\n                }\n              }\n            }\n          }\n\n          dispatch({\n            type: 'setFocusIndex',\n            focusIndex: newFocusIndex\n          });\n          if (onOptionsChange) onOptionsChange(options[newFocusIndex]);\n          optionsContainerRef.current = optionsContainerElement;\n          break;\n        }\n\n      case UP_ARROW:\n        {\n          event.preventDefault();\n\n          if (!isFocus) {\n            dispatch({\n              type: 'toggleFocus',\n              isFocus: true\n            });\n            if (optionElement && optionsContainerElement) optionsContainerElement.scrollTop = optionElement.offsetTop - optionElement.offsetHeight;\n          } else {\n            if (focusIndex <= 0) {\n              newFocusIndex = options.length - 1;\n              if (optionsContainerElement) optionsContainerElement.scrollTop = optionsContainerElement.scrollHeight;\n            } else {\n              newFocusIndex = focusIndex - 1;\n\n              if (optionElement && optionsContainerElement) {\n                var _optionPosition = optionElement.offsetTop - optionElement.offsetHeight;\n\n                if (_optionPosition <= optionsContainerElement.scrollTop) {\n                  optionsContainerElement.scrollTop -= optionElement.offsetHeight;\n                }\n              }\n            }\n          }\n\n          dispatch({\n            type: 'setFocusIndex',\n            focusIndex: newFocusIndex\n          });\n          if (onOptionsChange) onOptionsChange(options[newFocusIndex]);\n          optionsContainerRef.current = optionsContainerElement;\n          break;\n        }\n\n      case ENTER_KEY:\n        {\n          if (focusIndex > -1 && focusIndex < options.length) selectSuggestionHandler();\n          break;\n        }\n\n      case ESCAPE_KEY:\n        {\n          event.target.blur();\n          dispatch({\n            type: 'toggleFocus',\n            isFocus: false\n          });\n          break;\n        }\n    }\n  };\n\n  var filterSuggestion = function filterSuggestion(filterText) {\n    if (filterText.length === 0) setOptions(comboBoxOptions);else {\n      var filteredSuggestion = comboBoxOptions.filter(function (option) {\n        return option.toLowerCase().indexOf(filterText.toLowerCase()) !== -1;\n      });\n      setOptions(filteredSuggestion);\n    }\n  };\n\n  var inputChangeHandler = function inputChangeHandler(event) {\n    if (onChange) onChange(event);\n    setInputValue(event.target.value);\n    if (enableAutocomplete) filterSuggestion(event.target.value);\n  };\n\n  var inputClickHandler = function inputClickHandler() {\n    dispatch({\n      type: 'toggleFocus',\n      isFocus: true\n    });\n    dispatch({\n      type: 'setFocusIndex',\n      focusIndex: options.indexOf(inputValue.toString())\n    });\n  };\n\n  var focusHandler = function focusHandler() {\n    var optionsContainerElement = optionsContainerRef.current;\n    var optionElement = optionRef.current;\n    optionsContainerElement.scrollTop = optionElement === null || optionElement === void 0 ? void 0 : optionElement.offsetTop;\n    dispatch({\n      type: 'toggleFocus',\n      isFocus: true\n    });\n  };\n\n  var mouseEnterHandler = function mouseEnterHandler(index) {\n    dispatch({\n      type: 'setFocusIndex',\n      focusIndex: index\n    });\n    if (onOptionsChange) onOptionsChange(options[index]);\n  };\n\n  return React.createElement(\"div\", {\n    className: styles.comboBox,\n    style: style\n  }, React.createElement(\"input\", {\n    onFocus: focusHandler,\n    onChange: inputChangeHandler,\n    placeholder: placeholder || '',\n    onKeyDown: keyHandler,\n    value: inputValue,\n    className: styles.comboBoxInput,\n    onBlur: blurHandler,\n    name: name,\n    style: _extends({}, inputStyles, {\n      cursor: editable ? 'text' : 'default'\n    }),\n    readOnly: !editable,\n    onClick: inputClickHandler\n  }), React.createElement(\"div\", {\n    className: styles.comboBoxPopover,\n    style: _extends({\n      opacity: isFocus ? 1 : 0,\n      visibility: isFocus ? 'visible' : 'hidden'\n    }, suggestionListPositionStyles),\n    ref: optionsContainerRef,\n    onMouseEnter: function onMouseEnter() {\n      return setIsMouseInsideOptions(true);\n    },\n    onMouseLeave: function onMouseLeave() {\n      return setIsMouseInsideOptions(false);\n    }\n  }, React.createElement(\"div\", {\n    className: styles.comboBoxList,\n    style: {\n      maxHeight: isFocus ? optionMaxHeight : 0\n    }\n  }, options.map(function (option, index) {\n    return React.createElement(\"div\", {\n      className: className ? styles.comboBoxOption + \" \" + className : styles.comboBoxOption,\n      key: option,\n      ref: index === focusIndex ? optionRef : null,\n      style: {\n        backgroundColor: index === focusIndex ? focusColor || 'rgba(155,155,155,0.15)' : 'white',\n        fontWeight: index === focusIndex ? 'bold' : 'normal'\n      },\n      onClick: function onClick() {\n        return selectSuggestionHandler();\n      },\n      onMouseDown: function onMouseDown(e) {\n        return e.preventDefault();\n      },\n      onMouseEnter: function onMouseEnter() {\n        return mouseEnterHandler(index);\n      }\n    }, renderOptions ? renderOptions(option) : option);\n  }))));\n};\n\nexport default ComboBox;","map":{"version":3,"sources":["../src/reducer/focusReducer.ts","../src/index.tsx"],"names":["initialState","isFocus","focusIndex","focusReducer","action","UP_ARROW","DOWN_ARROW","ENTER_KEY","ESCAPE_KEY","ComboBox","options","comboBoxOptions","onChange","defaultValue","placeholder","onSelect","onOptionsChange","optionsListMaxHeight","renderOptions","style","className","focusColor","enableAutocomplete","inputStyles","name","onBlur","editable","optionMaxHeight","suggestionListPositionStyles","setOptions","useState","inputValue","setInputValue","state","dispatch","useReducer","isMouseInsideOptions","setIsMouseInsideOptions","IsOptionsPositionedTop","setIsOptionsPositionedTop","optionsContainerRef","useRef","optionRef","useEffect","type","optionsContainerElement","offsetBottom","window","bottom","marginBottom","top","marginTop","blurHandler","updateValue","index","resetFocusIndex","option","selectSuggestionHandler","keyHandler","optionElement","newFocusIndex","event","optionPosition","optionsContainerPosition","filterSuggestion","filterText","filteredSuggestion","inputChangeHandler","inputClickHandler","focusHandler","mouseEnterHandler","styles","comboBox","onFocus","onKeyDown","value","comboBoxInput","cursor","readOnly","onClick","comboBoxPopover","opacity","visibility","ref","onMouseEnter","onMouseLeave","comboBoxList","maxHeight","comboBoxOption","key","backgroundColor","fontWeight","onMouseDown","e"],"mappings":";;;;;;;;;;;;;;;;;;;;AASA,IAAMA,YAAY,GAAmB;AACnCC,EAAAA,OAAO,EAD4B,KAAA;AAEnCC,EAAAA,UAAU,EAAE,CAAC;AAFsB,CAArC;;AAKA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAA,KAAA,EAAA,MAAA,EAAA;AACnB,UAAQC,MAAM,CAAd,IAAA;AACE,SAAA,eAAA;AACE,aAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAAmBF,QAAAA,UAAU,EAAEE,MAAM,CAACF;AAAtC,OAAA,CAAA;;AACF,SAAA,aAAA;AACE,aAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAAmBD,QAAAA,OAAO,EAAEG,MAAM,CAACH;AAAnC,OAAA,CAAA;;AACF;AACE,aAAA,KAAA;AANJ;AADF,CAAA;;;;;;;;;ACUA,IAAMI,QAAQ,GAAd,EAAA;AACA,IAAMC,UAAU,GAAhB,EAAA;AACA,IAAMC,SAAS,GAAf,EAAA;AACA,IAAMC,UAAU,GAAhB,EAAA;;AAEA,IAAMC,QAAQ,GAA4B,SAApCA,QAAoC,CAAA,IAAA,EAAA;MAC/BE,eAAAA,GAAAA,IAAAA,CAATD,O;MACAE,QAAAA,GAAAA,IAAAA,CAAAA,Q;MACAC,YAAAA,GAAAA,IAAAA,CAAAA,Y;MACAC,WAAAA,GAAAA,IAAAA,CAAAA,W;MACAC,QAAAA,GAAAA,IAAAA,CAAAA,Q;MACAC,eAAAA,GAAAA,IAAAA,CAAAA,e;MACAC,oBAAAA,GAAAA,IAAAA,CAAAA,oB;MACAC,aAAAA,GAAAA,IAAAA,CAAAA,a;MACAC,KAAAA,GAAAA,IAAAA,CAAAA,K;MACAC,SAAAA,GAAAA,IAAAA,CAAAA,S;MACAC,UAAAA,GAAAA,IAAAA,CAAAA,U;MACAC,kBAAAA,GAAAA,IAAAA,CAAAA,kB;MACAC,WAAAA,GAAAA,IAAAA,CAAAA,W;MACAC,IAAAA,GAAAA,IAAAA,CAAAA,I;MACAC,MAAAA,GAAAA,IAAAA,CAAAA,M;2BACAC,Q;MAAAA,QAAAA,GAAAA,aAAAA,KAAAA,KAAAA,CAAAA,GAAW,IAAXA,GAAW,a;AAEX,MAAMC,eAAe,GAAGV,oBAAoB,IAA5C,GAAA;AACA,MAAIW,4BAA4B,GAAhC,EAAA;;kBAK8BE,QAAQ,CAAA,eAAA,C;MAA/BpB,OAAAA,GAAAA,SAAAA,CAAAA,CAAAA,C;MAASmB,UAAAA,GAAAA,SAAAA,CAAAA,CAAAA,C;;mBACoBC,QAAQ,CAACjB,YAAY,IAAb,EAAA,C;MAArCkB,UAAAA,GAAAA,UAAAA,CAAAA,CAAAA,C;MAAYC,aAAAA,GAAAA,UAAAA,CAAAA,CAAAA,C;;oBACOG,UAAU,CAAA,YAAA,EAAA,YAAA,C;MAA7BF,KAAAA,GAAAA,WAAAA,CAAAA,CAAAA,C;MAAOC,QAAAA,GAAAA,WAAAA,CAAAA,CAAAA,C;;MACNjC,OAAAA,GAAwBgC,KAAAA,CAAxBhC,O;MAASC,UAAAA,GAAe+B,KAAAA,CAAf/B,U;;mBACuC4B,QAAQ,CAAA,KAAA,C;MAAzDM,oBAAAA,GAAAA,UAAAA,CAAAA,CAAAA,C;MAAsBC,uBAAAA,GAAAA,UAAAA,CAAAA,CAAAA,C;;mBAC+BP,QAAQ,CAAA,KAAA,C;MAA7DQ,sBAAAA,GAAAA,UAAAA,CAAAA,CAAAA,C;MAAwBC,yBAAAA,GAAAA,UAAAA,CAAAA,CAAAA,C;;AAE/B,MAAMC,mBAAmB,GAAGC,MAAM,CAAlC,IAAkC,CAAlC;AACA,MAAMC,SAAS,GAAGD,MAAM,CAAxB,IAAwB,CAAxB;AAEAE,EAAAA,SAAS,CAAC,YAAA;AACR,QAAI,CAAJ,OAAA,EAAcX,aAAa,CAACnB,YAAY,IAA1BmB,EAAa,CAAbA;AACdE,IAAAA,QAAQ,CAAC;AACPU,MAAAA,IAAI,EADG,eAAA;AAEP1C,MAAAA,UAAU,EAAEW,YAAY,GAAGH,OAAO,CAAPA,OAAAA,CAAgBG,YAAY,CAA/B,QAAmBA,EAAhBH,CAAH,GAA8C,CAAC;AAFhE,KAAD,CAARwB;AAFO,GAAA,EAMN,CANHS,YAMG,CANM,CAATA;AAQAA,EAAAA,SAAS,CAAC,YAAA;;;AAER,QAAME,uBAAuB,GAAQL,mBAAmB,CAAxD,OAAA;AAEA,QAAMM,YAAY,GAChBC,MAAM,CAANA,WAAAA,IACAF,uBADAE,KAAAA,IACAF,IAAAA,uBADAE,KAAAA,KAAAA,CACAF,GADAE,KAAAA,CACAF,GADAE,CAAAA,qBAAAA,GACAF,uBAAuB,CADvBE,YAAAA,MAAAA,IAAAA,IAAAA,qBAAAA,KAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GACAF,qBAAAA,CAAAA,qBAAAA,GAFF,GACEE,CADF;;AAIA,QACEpB,eAAe,GAAfA,YAAAA,IACA,CAAA,uBAAuB,KAAvB,IAAA,IAAA,uBAAuB,KAAA,KAAvB,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,sBAAA,GAAA,uBAAuB,CAAvB,YAAA,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,CAAA,qBAAA,GAAA,GAAA,IAFF,YAAA,EAIE;AACAY,MAAAA,yBAAyB,CAAzBA,IAAyB,CAAzBA;AALF,KAAA,MAMO;AACLA,MAAAA,yBAAyB,CAAzBA,KAAyB,CAAzBA;AACD;AAhBM,GAAA,EAiBN,CAjBHI,OAiBG,CAjBM,CAATA;AAmBA,MAAA,sBAAA,EACE,4BAA4B,GAAG;AAC7BK,IAAAA,MAAM,EADuB,MAAA;AAE7BC,IAAAA,YAAY,EAAE;AAFe,GAA/B,CADF,KAME,4BAA4B,GAAG;AAC7BC,IAAAA,GAAG,EAD0B,MAAA;AAE7BC,IAAAA,SAAS,EAAE;AAFkB,GAA/B;;AAKF,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAAA,KAAA,EAAA;AAClB,QAAI,CAAJ,oBAAA,EAA2B,QAAQ,CAAC;AAAER,MAAAA,IAAI,EAAN,aAAA;AAAuB3C,MAAAA,OAAO,EAAE;AAAhC,KAAD,CAAR;AAC3B,QAAA,MAAA,EAAYwB,MAAM,CAANA,KAAM,CAANA;AAFd,GAAA;;AAKA,MAAM4B,WAAW,GAAG,SAAdA,WAAc,CAAA,KAAA,EAAA;QAACC,KAAAA,KAAAA,KAAAA,C,EAAAA;AAAAA,MAAAA,KAAAA,GAAgBpD,UAAhBoD;;;AACnB,QAAIA,KAAK,KAAK,CAAd,CAAA,EAAkB;AAChBtB,MAAAA,aAAa,CAACtB,OAAO,CAArBsB,KAAqB,CAAR,CAAbA;AACA,UAAA,eAAA,EAAqBhB,eAAe,CAACN,OAAO,CAAvBM,KAAuB,CAAR,CAAfA;AACtB;AAJH,GAAA;;AASA,MAAMuC,eAAe,GAAG,SAAlBA,eAAkB,GAAA;AACtB5C,IAAAA,eAAe,CAAfA,OAAAA,CAAwB,UAAA,MAAA,EAAA,KAAA,EAAA;AACtB,UAAI6C,MAAM,KAAK9C,OAAO,CAAtB,UAAsB,CAAtB,EACE,QAAQ,CAAC;AACPkC,QAAAA,IAAI,EADG,eAAA;AAEP1C,QAAAA,UAAU,EAAEoD;AAFL,OAAD,CAAR;AAFJ3C,KAAAA;AADF,GAAA;;AAUA,MAAM8C,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAA;AAC9BJ,IAAAA,WAAW;AACXnB,IAAAA,QAAQ,CAAC;AAAEU,MAAAA,IAAI,EAAN,aAAA;AAAuB3C,MAAAA,OAAO,EAAE;AAAhC,KAAD,CAARiC;AACAqB,IAAAA,eAAe;AACf1B,IAAAA,UAAU,CAAVA,eAAU,CAAVA;AAEA,QAAA,QAAA,EAAcd,QAAQ,CAACL,OAAO,CAAhBK,UAAgB,CAAR,CAARA;AANhB,GAAA;;AASA,MAAM2C,UAAU,GAAG,SAAbA,UAAa,CAAA,KAAA,EAAA;AACjB,QAAMb,uBAAuB,GAAQL,mBAAmB,CAAxD,OAAA;AACA,QAAMmB,aAAa,GAAQjB,SAAS,CAApC,OAAA;AACA,QAAIkB,aAAa,GAAjB,UAAA;;AAEA,YAAQC,KAAK,CAAb,OAAA;AACE,WAAA,UAAA;AAAiB;AACfA,UAAAA,KAAK,CAALA,cAAAA;;AAIA,cAAI,CAAJ,OAAA,EAAc;AACZ3B,YAAAA,QAAQ,CAAC;AAAEU,cAAAA,IAAI,EAAN,aAAA;AAAuB3C,cAAAA,OAAO,EAAE;AAAhC,aAAD,CAARiC;AACA,gBAAIyB,aAAa,IAAjB,uBAAA,EACEd,uBAAuB,CAAvBA,SAAAA,GACEc,aAAa,CAAbA,SAAAA,GAA0BA,aAAa,CADzCd,YAAAA;AAHJ,WAAA,MAKO;AAGL,gBAAI3C,UAAU,IAAIQ,OAAO,CAAPA,MAAAA,GAAlB,CAAA,EAAsC;AACpCkD,cAAAA,aAAa,GAAbA,CAAAA;AACAf,cAAAA,uBAAuB,CAAvBA,SAAAA,GAAAA,CAAAA;AAFF,aAAA,MAKK;AACHe,cAAAA,aAAa,GAAG1D,UAAU,GAA1B0D,CAAAA;;AACA,kBAAID,aAAa,IAAjB,uBAAA,EAA8C;AAC5C,oBAAMG,cAAc,GAClBH,aAAa,CAAbA,SAAAA,GAA0BA,aAAa,CADzC,YAAA;AAGA,oBAAMI,wBAAwB,GAC5BlB,uBAAuB,CAAvBA,YAAAA,GACAA,uBAAuB,CADvBA,SAAAA,GAEAc,aAAa,CAHf,YAAA;;AAQA,oBAAIG,cAAc,IAAlB,wBAAA,EAAgD;AAC9CjB,kBAAAA,uBAAuB,CAAvBA,SAAAA,IAAqCc,aAAa,CAAlDd,YAAAA;AACD;AACF;AACF;AACF;;AACDX,UAAAA,QAAQ,CAAC;AACPU,YAAAA,IAAI,EADG,eAAA;AAEP1C,YAAAA,UAAU,EAAE0D;AAFL,WAAD,CAAR1B;AAKA,cAAA,eAAA,EAAqBlB,eAAe,CAACN,OAAO,CAAvBM,aAAuB,CAAR,CAAfA;AACrBwB,UAAAA,mBAAmB,CAAnBA,OAAAA,GAAAA,uBAAAA;AACA;AACD;;AACD,WAAA,QAAA;AAAe;AACbqB,UAAAA,KAAK,CAALA,cAAAA;;AAGA,cAAI,CAAJ,OAAA,EAAc;AACZ3B,YAAAA,QAAQ,CAAC;AAAEU,cAAAA,IAAI,EAAN,aAAA;AAAuB3C,cAAAA,OAAO,EAAE;AAAhC,aAAD,CAARiC;AACA,gBAAIyB,aAAa,IAAjB,uBAAA,EACEd,uBAAuB,CAAvBA,SAAAA,GACEc,aAAa,CAAbA,SAAAA,GAA0BA,aAAa,CADzCd,YAAAA;AAHJ,WAAA,MAKO;AAEL,gBAAI3C,UAAU,IAAd,CAAA,EAAqB;AACnB0D,cAAAA,aAAa,GAAGlD,OAAO,CAAPA,MAAAA,GAAhBkD,CAAAA;AAEA,kBAAA,uBAAA,EACEf,uBAAuB,CAAvBA,SAAAA,GACEA,uBAAuB,CADzBA,YAAAA;AAJJ,aAAA,MAMO;AACLe,cAAAA,aAAa,GAAG1D,UAAU,GAA1B0D,CAAAA;;AAIA,kBAAID,aAAa,IAAjB,uBAAA,EAA8C;AAC5C,oBAAMG,eAAc,GAClBH,aAAa,CAAbA,SAAAA,GAA0BA,aAAa,CADzC,YAAA;;AAEA,oBAAIG,eAAc,IAAIjB,uBAAuB,CAA7C,SAAA,EAAyD;AACvDA,kBAAAA,uBAAuB,CAAvBA,SAAAA,IAAqCc,aAAa,CAAlDd,YAAAA;AACD;AACF;AACF;AACF;;AACDX,UAAAA,QAAQ,CAAC;AACPU,YAAAA,IAAI,EADG,eAAA;AAEP1C,YAAAA,UAAU,EAAE0D;AAFL,WAAD,CAAR1B;AAKA,cAAA,eAAA,EAAqBlB,eAAe,CAACN,OAAO,CAAvBM,aAAuB,CAAR,CAAfA;AACrBwB,UAAAA,mBAAmB,CAAnBA,OAAAA,GAAAA,uBAAAA;AACA;AACD;;AACD,WAAA,SAAA;AAAgB;AACd,cAAItC,UAAU,GAAG,CAAbA,CAAAA,IAAmBA,UAAU,GAAGQ,OAAO,CAA3C,MAAA,EACE+C,uBAAuB;AAEzB;AACD;;AACD,WAAA,UAAA;AAAiB;AACfI,UAAAA,KAAK,CAALA,MAAAA,CAAAA,IAAAA;AACA3B,UAAAA,QAAQ,CAAC;AAAEU,YAAAA,IAAI,EAAN,aAAA;AAAuB3C,YAAAA,OAAO,EAAE;AAAhC,WAAD,CAARiC;AACA;AACD;AAlGH;AALF,GAAA;;AA2GA,MAAM8B,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,UAAA,EAAA;AACvB,QAAIC,UAAU,CAAVA,MAAAA,KAAJ,CAAA,EAA6BpC,UAAU,CAAvC,eAAuC,CAAVA,CAA7B,KACK;AACH,UAAMqC,kBAAkB,GAAG,eAAe,CAAf,MAAA,CAAuB,UAAA,MAAA,EAAA;AAChD,eAAOV,MAAM,CAANA,WAAAA,GAAAA,OAAAA,CAA6BS,UAAU,CAAvCT,WAA6BS,EAA7BT,MAA2D,CAAlE,CAAA;AADF,OAA2B,CAA3B;AAGA3B,MAAAA,UAAU,CAAVA,kBAAU,CAAVA;AACD;AAPH,GAAA;;AAUA,MAAMsC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA,KAAA,EAAA;AACzB,QAAA,QAAA,EAAcvD,QAAQ,CAARA,KAAQ,CAARA;AACdoB,IAAAA,aAAa,CAAC6B,KAAK,CAALA,MAAAA,CAAd7B,KAAa,CAAbA;AACA,QAAA,kBAAA,EAAwBgC,gBAAgB,CAACH,KAAK,CAALA,MAAAA,CAAjBG,KAAgB,CAAhBA;AAH1B,GAAA;;AAMA,MAAMI,iBAAiB,GAAG,SAApBA,iBAAoB,GAAA;AACxBlC,IAAAA,QAAQ,CAAC;AACPU,MAAAA,IAAI,EADG,aAAA;AAEP3C,MAAAA,OAAO,EAAE;AAFF,KAAD,CAARiC;AAIAA,IAAAA,QAAQ,CAAC;AACPU,MAAAA,IAAI,EADG,eAAA;AAEP1C,MAAAA,UAAU,EAAEQ,OAAO,CAAPA,OAAAA,CAAgBqB,UAAU,CAA1BrB,QAAgBqB,EAAhBrB;AAFL,KAAD,CAARwB;AALF,GAAA;;AAWA,MAAMmC,YAAY,GAAG,SAAfA,YAAe,GAAA;AACnB,QAAMxB,uBAAuB,GAAQL,mBAAmB,CAAxD,OAAA;AACA,QAAMmB,aAAa,GAAQjB,SAAS,CAApC,OAAA;AAEAG,IAAAA,uBAAuB,CAAvBA,SAAAA,GAAoCc,aAApCd,KAAAA,IAAoCc,IAAAA,aAApCd,KAAAA,KAAAA,CAAoCc,GAApCd,KAAAA,CAAoCc,GAAAA,aAAa,CAAjDd,SAAAA;AACAX,IAAAA,QAAQ,CAAC;AAAEU,MAAAA,IAAI,EAAN,aAAA;AAAuB3C,MAAAA,OAAO,EAAE;AAAhC,KAAD,CAARiC;AALF,GAAA;;AAQA,MAAMoC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,KAAA,EAAA;AACxBpC,IAAAA,QAAQ,CAAC;AAAEU,MAAAA,IAAI,EAAN,eAAA;AAAyB1C,MAAAA,UAAU,EAAEoD;AAArC,KAAD,CAARpB;AACA,QAAA,eAAA,EAAqBlB,eAAe,CAACN,OAAO,CAAvBM,KAAuB,CAAR,CAAfA;AAFvB,GAAA;;AAKA,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAKI,IAAAA,SAAS,EAAEmD,MAAM,CAACC,QAAvB;AAAiCrD,IAAAA,KAAK,EAAEA;AAAxC,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;AACEsD,IAAAA,OAAO,EAAEJ,YADX;AAEEzD,IAAAA,QAAQ,EAAEuD,kBAFZ;AAGErD,IAAAA,WAAW,EAAEA,WAAW,IAAI,EAH9B;AAIE4D,IAAAA,SAAS,EAAEhB,UAJb;AAKEiB,IAAAA,KAAK,EAAE5C,UALT;AAMEX,IAAAA,SAAS,EAAEmD,MAAM,CAACK,aANpB;AAOEnD,IAAAA,MAAM,EAAE2B,WAPV;AAQE5B,IAAAA,IAAI,EAAEA,IARR;AASEL,IAAAA,KAAK,EAAA,QAAA,CAAA,EAAA,EAAA,WAAA,EAAA;AAAoB0D,MAAAA,MAAM,EAAEnD,QAAQ,GAAA,MAAA,GAAY;AAAhD,KAAA,CATP;AAUEoD,IAAAA,QAAQ,EAAE,CAACpD,QAVb;AAWEqD,IAAAA,OAAO,EAAEX;AAXX,GAAA,CADF,EAcE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACEhD,IAAAA,SAAS,EAAEmD,MAAM,CAACS,eADpB;AAEE7D,IAAAA,KAAK,EAAA,QAAA,CAAA;AACH8D,MAAAA,OAAO,EAAEhF,OAAO,GAAA,CAAA,GADb,CAAA;AAEHiF,MAAAA,UAAU,EAAEjF,OAAO,GAAA,SAAA,GAAe;AAF/B,KAAA,EAAA,4BAAA,CAFP;AAOEkF,IAAAA,GAAG,EAAE3C,mBAPP;AAQE4C,IAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,aAAM/C,uBAAuB,CAA7B,IAA6B,CAA7B;AAAA,KARhB;AASEgD,IAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,aAAMhD,uBAAuB,CAA7B,KAA6B,CAA7B;AAAA;AAThB,GAAA,EAWE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACEjB,IAAAA,SAAS,EAAEmD,MAAM,CAACe,YADpB;AAEEnE,IAAAA,KAAK,EAAE;AAAEoE,MAAAA,SAAS,EAAEtF,OAAO,GAAA,eAAA,GAAqB;AAAzC;AAFT,GAAA,EAIG,OAAO,CAAP,GAAA,CAAY,UAAA,MAAA,EAAA,KAAA,EAAA;AACX,WACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACEmB,MAAAA,SAAS,EACPA,SAAS,GACFmD,MAAM,CADJ,cACFA,GADE,GACFA,GADE,SAAA,GAELA,MAAM,CAACiB,cAJf;AAMEC,MAAAA,GAAG,EAAEjC,MANP;AAOE2B,MAAAA,GAAG,EAAE7B,KAAK,KAALA,UAAAA,GAAAA,SAAAA,GAAmC,IAP1C;AAQEnC,MAAAA,KAAK,EAAE;AACLuE,QAAAA,eAAe,EACbpC,KAAK,KAALA,UAAAA,GACIjC,UAAU,IADdiC,wBAAAA,GAFG,OAAA;AAKLqC,QAAAA,UAAU,EAAErC,KAAK,KAALA,UAAAA,GAAAA,MAAAA,GAAgC;AALvC,OART;AAeEyB,MAAAA,OAAO,EAAE,SAAA,OAAA,GAAA;AAAA,eAAMtB,uBAAN,EAAA;AAAA,OAfX;AAgBEmC,MAAAA,WAAW,EAAE,SAAA,WAAA,CAAA,CAAA,EAAA;AAAA,eAAOC,CAAC,CAAR,cAAOA,EAAP;AAAA,OAhBf;AAiBET,MAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,eAAMd,iBAAiB,CAAvB,KAAuB,CAAvB;AAAA;AAjBhB,KAAA,EAmBGpD,aAAa,GAAGA,aAAa,CAAhB,MAAgB,CAAhB,GApBlB,MACE,CADF;AA/BV,GA8BS,CAJH,CAXF,CAdF,CADF;AA5PF,CAAA","sourcesContent":["type FocusStateType = {\n  isFocus: boolean\n  focusIndex: number\n}\n\ntype Action =\n  | { type: 'setFocusIndex'; focusIndex: number }\n  | { type: 'toggleFocus'; isFocus: boolean }\n\nconst initialState: FocusStateType = {\n  isFocus: false,\n  focusIndex: -1\n}\n\nconst focusReducer = (state: FocusStateType, action: Action) => {\n  switch (action.type) {\n    case 'setFocusIndex':\n      return { ...state, focusIndex: action.focusIndex }\n    case 'toggleFocus':\n      return { ...state, isFocus: action.isFocus }\n    default:\n      return state\n  }\n}\n\nexport { initialState, focusReducer }\n","import React, { useState, useRef, useEffect, useReducer } from 'react'\n\nimport { initialState, focusReducer } from './reducer/focusReducer'\nimport styles from './index.css'\n\ntype ComboBoxProps = {\n  options: string[]\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void\n  defaultValue?: string\n  placeholder?: string\n  onSelect?: (option: string) => void\n  onOptionsChange?: (option: string) => void\n  optionsListMaxHeight?: number\n  renderOptions?: (option: string) => React.ReactNode\n  style?: React.CSSProperties\n  className?: string\n  focusColor?: string\n  enableAutocomplete?: boolean\n  inputStyles?: React.CSSProperties\n  name?: string\n  onBlur?: (event?: React.ChangeEvent<HTMLInputElement>) => void\n  editable?: boolean\n}\n\nconst UP_ARROW = 38\nconst DOWN_ARROW = 40\nconst ENTER_KEY = 13\nconst ESCAPE_KEY = 27\n\nconst ComboBox: React.FC<ComboBoxProps> = ({\n  options: comboBoxOptions,\n  onChange,\n  defaultValue,\n  placeholder,\n  onSelect,\n  onOptionsChange,\n  optionsListMaxHeight,\n  renderOptions,\n  style,\n  className,\n  focusColor,\n  enableAutocomplete,\n  inputStyles,\n  name,\n  onBlur,\n  editable = true\n}) => {\n  const optionMaxHeight = optionsListMaxHeight || 200\n  let suggestionListPositionStyles: React.CSSProperties = {}\n\n  // Function that will check whether the defaultIndex falls inside the length of the options\n  // or else it will return -1\n\n  const [options, setOptions] = useState<string[]>(comboBoxOptions)\n  const [inputValue, setInputValue] = useState(defaultValue || '')\n  const [state, dispatch] = useReducer(focusReducer, initialState)\n  const { isFocus, focusIndex } = state\n  const [isMouseInsideOptions, setIsMouseInsideOptions] = useState(false) // This is used to determine whether the mouse cursor is inside or outside options container\n  const [IsOptionsPositionedTop, setIsOptionsPositionedTop] = useState(false)\n\n  const optionsContainerRef = useRef<HTMLDivElement | null>(null)\n  const optionRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    if (!isFocus) setInputValue(defaultValue || '')\n    dispatch({\n      type: 'setFocusIndex',\n      focusIndex: defaultValue ? options.indexOf(defaultValue.toString()) : -1\n    })\n  }, [defaultValue])\n\n  useEffect(() => {\n    // Position the options container top or bottom based on the space available\n    const optionsContainerElement: any = optionsContainerRef.current\n\n    const offsetBottom =\n      window.innerHeight -\n      optionsContainerElement?.offsetParent?.getBoundingClientRect().top\n\n    if (\n      optionMaxHeight > offsetBottom &&\n      optionsContainerElement?.offsetParent?.getBoundingClientRect().top >\n        offsetBottom\n    ) {\n      setIsOptionsPositionedTop(true)\n    } else {\n      setIsOptionsPositionedTop(false)\n    }\n  }, [isFocus])\n\n  if (IsOptionsPositionedTop)\n    suggestionListPositionStyles = {\n      bottom: '100%',\n      marginBottom: '5px'\n    }\n  else\n    suggestionListPositionStyles = {\n      top: '100%',\n      marginTop: '5px'\n    }\n\n  const blurHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (!isMouseInsideOptions) dispatch({ type: 'toggleFocus', isFocus: false })\n    if (onBlur) onBlur(event)\n  }\n\n  const updateValue = (index: number = focusIndex) => {\n    if (index !== -1) {\n      setInputValue(options[index])\n      if (onOptionsChange) onOptionsChange(options[index])\n    }\n  }\n\n  // While searching, the options are filtered and the index also changed.\n  // So the focus index is set to original based on all the options.\n  const resetFocusIndex = () => {\n    comboBoxOptions.forEach((option: string, index: number) => {\n      if (option === options[focusIndex])\n        dispatch({\n          type: 'setFocusIndex',\n          focusIndex: index\n        })\n    })\n  }\n\n  const selectSuggestionHandler = () => {\n    updateValue()\n    dispatch({ type: 'toggleFocus', isFocus: false })\n    resetFocusIndex()\n    setOptions(comboBoxOptions)\n\n    if (onSelect) onSelect(options[focusIndex])\n  }\n\n  const keyHandler = (event: any) => {\n    const optionsContainerElement: any = optionsContainerRef.current\n    const optionElement: any = optionRef.current\n    let newFocusIndex = focusIndex\n\n    switch (event.keyCode) {\n      case DOWN_ARROW: {\n        event.preventDefault()\n\n        // set the focus to true if the options list was not opened.\n        // Also set the scroll top\n        if (!isFocus) {\n          dispatch({ type: 'toggleFocus', isFocus: true })\n          if (optionElement && optionsContainerElement)\n            optionsContainerElement.scrollTop =\n              optionElement.offsetTop - optionElement.offsetHeight\n        } else {\n          // If the focus reaches the end of the options in the list, set the focus to 0\n\n          if (focusIndex >= options.length - 1) {\n            newFocusIndex = 0\n            optionsContainerElement.scrollTop = 0\n          }\n          // Change the scroll position based on the selected option position\n          else {\n            newFocusIndex = focusIndex + 1\n            if (optionElement && optionsContainerElement) {\n              const optionPosition =\n                optionElement.offsetTop + optionElement.offsetHeight\n\n              const optionsContainerPosition =\n                optionsContainerElement.clientHeight +\n                optionsContainerElement.scrollTop -\n                optionElement.offsetHeight\n\n              // Measured the option position with the suggestion height\n              // changed the scroll top if the option reached the end of the options container height\n\n              if (optionPosition >= optionsContainerPosition) {\n                optionsContainerElement.scrollTop += optionElement.offsetHeight\n              }\n            }\n          }\n        }\n        dispatch({\n          type: 'setFocusIndex',\n          focusIndex: newFocusIndex\n        })\n\n        if (onOptionsChange) onOptionsChange(options[newFocusIndex])\n        optionsContainerRef.current = optionsContainerElement\n        break\n      }\n      case UP_ARROW: {\n        event.preventDefault()\n\n        // set the focus to true if the options list was not opened.\n        if (!isFocus) {\n          dispatch({ type: 'toggleFocus', isFocus: true })\n          if (optionElement && optionsContainerElement)\n            optionsContainerElement.scrollTop =\n              optionElement.offsetTop - optionElement.offsetHeight\n        } else {\n          // If the focus falls beyond the start of the options in the list, set the focus to height of the suggestion-list\n          if (focusIndex <= 0) {\n            newFocusIndex = options.length - 1\n\n            if (optionsContainerElement)\n              optionsContainerElement.scrollTop =\n                optionsContainerElement.scrollHeight\n          } else {\n            newFocusIndex = focusIndex - 1\n\n            // Measured the option position with the suggestion height\n            // changed the scroll top if the option reached the start of the options container height\n            if (optionElement && optionsContainerElement) {\n              const optionPosition =\n                optionElement.offsetTop - optionElement.offsetHeight\n              if (optionPosition <= optionsContainerElement.scrollTop) {\n                optionsContainerElement.scrollTop -= optionElement.offsetHeight\n              }\n            }\n          }\n        }\n        dispatch({\n          type: 'setFocusIndex',\n          focusIndex: newFocusIndex\n        })\n\n        if (onOptionsChange) onOptionsChange(options[newFocusIndex])\n        optionsContainerRef.current = optionsContainerElement\n        break\n      }\n      case ENTER_KEY: {\n        if (focusIndex > -1 && focusIndex < options.length)\n          selectSuggestionHandler()\n\n        break\n      }\n      case ESCAPE_KEY: {\n        event.target.blur()\n        dispatch({ type: 'toggleFocus', isFocus: false })\n        break\n      }\n    }\n  }\n\n  const filterSuggestion = (filterText: string) => {\n    if (filterText.length === 0) setOptions(comboBoxOptions)\n    else {\n      const filteredSuggestion = comboBoxOptions.filter((option) => {\n        return option.toLowerCase().indexOf(filterText.toLowerCase()) !== -1\n      })\n      setOptions(filteredSuggestion)\n    }\n  }\n\n  const inputChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (onChange) onChange(event)\n    setInputValue(event.target.value)\n    if (enableAutocomplete) filterSuggestion(event.target.value)\n  }\n\n  const inputClickHandler = () => {\n    dispatch({\n      type: 'toggleFocus',\n      isFocus: true\n    })\n    dispatch({\n      type: 'setFocusIndex',\n      focusIndex: options.indexOf(inputValue.toString())\n    })\n  }\n\n  const focusHandler = () => {\n    const optionsContainerElement: any = optionsContainerRef.current\n    const optionElement: any = optionRef.current\n\n    optionsContainerElement.scrollTop = optionElement?.offsetTop\n    dispatch({ type: 'toggleFocus', isFocus: true })\n  }\n\n  const mouseEnterHandler = (index: number) => {\n    dispatch({ type: 'setFocusIndex', focusIndex: index })\n    if (onOptionsChange) onOptionsChange(options[index])\n  }\n\n  return (\n    <div className={styles.comboBox} style={style}>\n      <input\n        onFocus={focusHandler}\n        onChange={inputChangeHandler}\n        placeholder={placeholder || ''}\n        onKeyDown={keyHandler}\n        value={inputValue}\n        className={styles.comboBoxInput}\n        onBlur={blurHandler}\n        name={name}\n        style={{ ...inputStyles, cursor: editable ? 'text' : 'default' }}\n        readOnly={!editable}\n        onClick={inputClickHandler}\n      />\n      <div\n        className={styles.comboBoxPopover}\n        style={{\n          opacity: isFocus ? 1 : 0,\n          visibility: isFocus ? 'visible' : 'hidden',\n          ...suggestionListPositionStyles\n        }}\n        ref={optionsContainerRef}\n        onMouseEnter={() => setIsMouseInsideOptions(true)}\n        onMouseLeave={() => setIsMouseInsideOptions(false)}\n      >\n        <div\n          className={styles.comboBoxList}\n          style={{ maxHeight: isFocus ? optionMaxHeight : 0 }}\n        >\n          {options.map((option, index) => {\n            return (\n              <div\n                className={\n                  className\n                    ? `${styles.comboBoxOption} ${className}`\n                    : styles.comboBoxOption\n                }\n                key={option}\n                ref={index === focusIndex ? optionRef : null}\n                style={{\n                  backgroundColor:\n                    index === focusIndex\n                      ? focusColor || 'rgba(155,155,155,0.15)'\n                      : 'white',\n                  fontWeight: index === focusIndex ? 'bold' : 'normal'\n                }}\n                onClick={() => selectSuggestionHandler()}\n                onMouseDown={(e) => e.preventDefault()}\n                onMouseEnter={() => mouseEnterHandler(index)}\n              >\n                {renderOptions ? renderOptions(option) : option}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComboBox\n"]},"metadata":{},"sourceType":"module"}