{"ast":null,"code":"/**\n * lodash 3.6.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n/* Native method references for those with the same name as other `lodash` methods. */\n\nvar nativeMax = Math.max;\n/**\n * Creates a function that invokes `func` with the `this` binding of the\n * created function and arguments from `start` and beyond provided as an array.\n *\n * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).\n *\n * @static\n * @memberOf _\n * @category Function\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n * @example\n *\n * var say = _.restParam(function(what, names) {\n *   return what + ' ' + _.initial(names).join(', ') +\n *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n * });\n *\n * say('hello', 'fred', 'barney', 'pebbles');\n * // => 'hello fred, barney, & pebbles'\n */\n\nfunction restParam(func, start) {\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n\n  start = nativeMax(start === undefined ? func.length - 1 : +start || 0, 0);\n  return function () {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        rest = Array(length);\n\n    while (++index < length) {\n      rest[index] = args[start + index];\n    }\n\n    switch (start) {\n      case 0:\n        return func.call(this, rest);\n\n      case 1:\n        return func.call(this, args[0], rest);\n\n      case 2:\n        return func.call(this, args[0], args[1], rest);\n    }\n\n    var otherArgs = Array(start + 1);\n    index = -1;\n\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n\n    otherArgs[start] = rest;\n    return func.apply(this, otherArgs);\n  };\n}\n\nmodule.exports = restParam;","map":{"version":3,"sources":["/Users/apple/Public/Northflow/e-voting/node_modules/lodash.restparam/index.js"],"names":["FUNC_ERROR_TEXT","nativeMax","Math","max","restParam","func","start","TypeError","undefined","length","args","arguments","index","rest","Array","call","otherArgs","apply","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAIA,eAAe,GAAG,qBAAtB;AAEA;;AACA,IAAIC,SAAS,GAAGC,IAAI,CAACC,GAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAAgC;AAC9B,MAAI,OAAOD,IAAP,IAAe,UAAnB,EAA+B;AAC7B,UAAM,IAAIE,SAAJ,CAAcP,eAAd,CAAN;AACD;;AACDM,EAAAA,KAAK,GAAGL,SAAS,CAACK,KAAK,KAAKE,SAAV,GAAuBH,IAAI,CAACI,MAAL,GAAc,CAArC,GAA2C,CAACH,KAAD,IAAU,CAAtD,EAA0D,CAA1D,CAAjB;AACA,SAAO,YAAW;AAChB,QAAII,IAAI,GAAGC,SAAX;AAAA,QACIC,KAAK,GAAG,CAAC,CADb;AAAA,QAEIH,MAAM,GAAGR,SAAS,CAACS,IAAI,CAACD,MAAL,GAAcH,KAAf,EAAsB,CAAtB,CAFtB;AAAA,QAGIO,IAAI,GAAGC,KAAK,CAACL,MAAD,CAHhB;;AAKA,WAAO,EAAEG,KAAF,GAAUH,MAAjB,EAAyB;AACvBI,MAAAA,IAAI,CAACD,KAAD,CAAJ,GAAcF,IAAI,CAACJ,KAAK,GAAGM,KAAT,CAAlB;AACD;;AACD,YAAQN,KAAR;AACE,WAAK,CAAL;AAAQ,eAAOD,IAAI,CAACU,IAAL,CAAU,IAAV,EAAgBF,IAAhB,CAAP;;AACR,WAAK,CAAL;AAAQ,eAAOR,IAAI,CAACU,IAAL,CAAU,IAAV,EAAgBL,IAAI,CAAC,CAAD,CAApB,EAAyBG,IAAzB,CAAP;;AACR,WAAK,CAAL;AAAQ,eAAOR,IAAI,CAACU,IAAL,CAAU,IAAV,EAAgBL,IAAI,CAAC,CAAD,CAApB,EAAyBA,IAAI,CAAC,CAAD,CAA7B,EAAkCG,IAAlC,CAAP;AAHV;;AAKA,QAAIG,SAAS,GAAGF,KAAK,CAACR,KAAK,GAAG,CAAT,CAArB;AACAM,IAAAA,KAAK,GAAG,CAAC,CAAT;;AACA,WAAO,EAAEA,KAAF,GAAUN,KAAjB,EAAwB;AACtBU,MAAAA,SAAS,CAACJ,KAAD,CAAT,GAAmBF,IAAI,CAACE,KAAD,CAAvB;AACD;;AACDI,IAAAA,SAAS,CAACV,KAAD,CAAT,GAAmBO,IAAnB;AACA,WAAOR,IAAI,CAACY,KAAL,CAAW,IAAX,EAAiBD,SAAjB,CAAP;AACD,GArBD;AAsBD;;AAEDE,MAAM,CAACC,OAAP,GAAiBf,SAAjB","sourcesContent":["/**\n * lodash 3.6.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Creates a function that invokes `func` with the `this` binding of the\n * created function and arguments from `start` and beyond provided as an array.\n *\n * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).\n *\n * @static\n * @memberOf _\n * @category Function\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n * @example\n *\n * var say = _.restParam(function(what, names) {\n *   return what + ' ' + _.initial(names).join(', ') +\n *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n * });\n *\n * say('hello', 'fred', 'barney', 'pebbles');\n * // => 'hello fred, barney, & pebbles'\n */\nfunction restParam(func, start) {\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        rest = Array(length);\n\n    while (++index < length) {\n      rest[index] = args[start + index];\n    }\n    switch (start) {\n      case 0: return func.call(this, rest);\n      case 1: return func.call(this, args[0], rest);\n      case 2: return func.call(this, args[0], args[1], rest);\n    }\n    var otherArgs = Array(start + 1);\n    index = -1;\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = rest;\n    return func.apply(this, otherArgs);\n  };\n}\n\nmodule.exports = restParam;\n"]},"metadata":{},"sourceType":"script"}