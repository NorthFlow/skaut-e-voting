{"ast":null,"code":"import _objectSpread from \"/Users/apple/Public/Northflow/e-voting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _readOnlyError from \"/Users/apple/Public/Northflow/e-voting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/readOnlyError\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/apple/Public/Northflow/e-voting/src/components/Table/Table.js\";\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\"; // @material-ui/core components\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Button from \"@material-ui/core/Button\"; // core components\n\nimport styles from \"assets/jss/material-dashboard-react/components/tableStyle.js\";\nimport MyModal from \"../Modal/MyModal\";\nimport { ModalManager } from 'react-dynamic-modal';\nimport Axios from \"axios\";\nvar useStyles = makeStyles(styles);\nvar hlavicka = [];\n\nvar openModal = function openModal(voting_id) {\n  console.log(\"ID V MODAL :   \" + voting_id);\n  Axios.get('http://localhost:4001/questions/get-question/' + voting_id).then(function (res) {\n    hlavicka = (_readOnlyError(\"hlavicka\"), res.data);\n    console.log(hlavicka);\n  })[\"catch\"](function (err) {\n    if (err.response) {\n      //TODO: show error response from server\n      window.alert(err.response.data.message);\n      console.log(err.response.data.message);\n\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        error: err.response.data.message\n      }));\n    } else if (err.request) {\n      //TODO: msg internet connection..\n      window.alert(\"Internet connection failed.\");\n    } else {\n      //TODO: rly dont know what error can happend here but can happend :D\n      window.alert(\"Something went wrong.\");\n    }\n  }); //urobime loop nad datami\n  //let datas = this.state.Votings;\n  // ----- nacitanie otazok k votingom.\n\n  /*\n    Axios.get('http://localhost:4001/questions/qawording/' + voting_id)\n      .then(res => {\n        let datas = [[]];\n        datas=res.data;\n        \n        ModalManager.open(<MyModal params={datas} acount={counts} onRequestClose={() => true}/>);\n      })\n      .catch(err => {\n        if (err.response) {\n          //TODO: show error response from server\n          window.alert(err.response.data.message);\n          \n          console.log(err.response.data.message);\n          this.setState({...this.state,error: err.response.data.message})\n        } else if (err.request) {\n          //TODO: msg internet connection..\n          window.alert(\"Internet connection failed.\");\n        } else {\n            //TODO: rly dont know what error can happend here but can happend :D\n            window.alert(\"Something went wrong.\");\n      }});*/\n};\n\nexport default function CustomTable(props) {\n  var _this2 = this;\n\n  var classes = useStyles();\n  var tableHead = props.tableHead,\n      tableData = props.tableData,\n      tableHeaderColor = props.tableHeaderColor;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.tableResponsive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    className: classes.table,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, tableHead !== undefined ? /*#__PURE__*/React.createElement(TableHead, {\n    className: classes[tableHeaderColor + \"TableHeader\"],\n    style: {\n      color: \"#019ECE\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    className: classes.tableHeadRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, tableHead.map(function (prop, key) {\n    return /*#__PURE__*/React.createElement(TableCell, {\n      className: classes.tableCell + \" \" + classes.tableHeadCell,\n      key: key,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 19\n      }\n    }, prop);\n  }))) : null, /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, tableData.map(function (propup, key) {\n    return /*#__PURE__*/React.createElement(TableRow, {\n      key: key,\n      className: classes.tableBodyRow,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      className: classes.tableCell,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }\n    }, propup.name), /*#__PURE__*/React.createElement(TableCell, {\n      className: classes.tableCell,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: openModal.bind(_this2, propup.id_question),\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }\n    }, \"DETAIL\")));\n  }))));\n}\nCustomTable.defaultProps = {\n  tableHeaderColor: \"gray\"\n};\nCustomTable.propTypes = {\n  tableHeaderColor: PropTypes.oneOf([\"warning\", \"primary\", \"danger\", \"success\", \"info\", \"rose\", \"gray\"]),\n  tableHead: PropTypes.arrayOf(PropTypes.string),\n  tableData: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string))\n};","map":{"version":3,"sources":["/Users/apple/Public/Northflow/e-voting/src/components/Table/Table.js"],"names":["React","PropTypes","makeStyles","Table","TableHead","TableRow","TableBody","TableCell","Button","styles","MyModal","ModalManager","Axios","useStyles","hlavicka","openModal","voting_id","console","log","get","then","res","data","err","response","window","alert","message","setState","state","error","request","CustomTable","props","classes","tableHead","tableData","tableHeaderColor","tableResponsive","table","undefined","color","tableHeadRow","map","prop","key","tableCell","tableHeadCell","propup","tableBodyRow","name","bind","id_question","defaultProps","propTypes","oneOf","arrayOf","string"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n// @material-ui/core components\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Button from \"@material-ui/core/Button\";\n// core components\nimport styles from \"assets/jss/material-dashboard-react/components/tableStyle.js\";\n\nimport MyModal from \"../Modal/MyModal\";\nimport { ModalManager} from 'react-dynamic-modal';\nimport Axios from \"axios\";\n\nconst useStyles = makeStyles(styles);\nconst hlavicka=[];\n\nconst openModal = (voting_id) =>{\n\n  console.log(\"ID V MODAL :   \" + voting_id);\n\n  \n  Axios.get('http://localhost:4001/questions/get-question/' + voting_id)\n    .then(res => {\n      hlavicka = res.data;\n      console.log(hlavicka);\n    })\n    .catch(err => {\n      if (err.response) {\n        //TODO: show error response from server\n        window.alert(err.response.data.message);\n        \n        console.log(err.response.data.message);\n        this.setState({...this.state,error: err.response.data.message})\n      } else if (err.request) {\n        //TODO: msg internet connection..\n        window.alert(\"Internet connection failed.\");\n      } else {\n          //TODO: rly dont know what error can happend here but can happend :D\n          window.alert(\"Something went wrong.\");\n    }});\n\n\n  //urobime loop nad datami\n  //let datas = this.state.Votings;\n  // ----- nacitanie otazok k votingom.\n/*\n  Axios.get('http://localhost:4001/questions/qawording/' + voting_id)\n    .then(res => {\n      let datas = [[]];\n      datas=res.data;\n      \n      ModalManager.open(<MyModal params={datas} acount={counts} onRequestClose={() => true}/>);\n    })\n    .catch(err => {\n      if (err.response) {\n        //TODO: show error response from server\n        window.alert(err.response.data.message);\n        \n        console.log(err.response.data.message);\n        this.setState({...this.state,error: err.response.data.message})\n      } else if (err.request) {\n        //TODO: msg internet connection..\n        window.alert(\"Internet connection failed.\");\n      } else {\n          //TODO: rly dont know what error can happend here but can happend :D\n          window.alert(\"Something went wrong.\");\n    }});*/\n\n  \n}\n\nexport default function CustomTable(props) {\n  const classes = useStyles();\n  const { tableHead, tableData, tableHeaderColor } = props;\n  return (\n    <div className={classes.tableResponsive}>\n      <Table className={classes.table}>\n        {tableHead !== undefined ? (\n          <TableHead className={classes[tableHeaderColor + \"TableHeader\"]} style={{color: \"#019ECE\"}}>\n            <TableRow className={classes.tableHeadRow}>\n              {tableHead.map((prop, key) => {\n                return (\n                  <TableCell\n                    className={classes.tableCell + \" \" + classes.tableHeadCell}\n                    key={key}\n                  >\n                    {prop}\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          </TableHead>\n        ) : null}\n        <TableBody>\n          {tableData.map((propup, key) => {\n            return (\n              <TableRow key={key} className={classes.tableBodyRow}>\n                  \n                    <TableCell className={classes.tableCell} >\n                      {propup.name}\n                    </TableCell>\n                  \n\n                <TableCell className={classes.tableCell} >\n                <Button onClick={openModal.bind(this, propup.id_question)}>DETAIL</Button>\n                </TableCell>\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}\n\nCustomTable.defaultProps = {\n  tableHeaderColor: \"gray\"\n};\n\nCustomTable.propTypes = {\n  tableHeaderColor: PropTypes.oneOf([\n    \"warning\",\n    \"primary\",\n    \"danger\",\n    \"success\",\n    \"info\",\n    \"rose\",\n    \"gray\"\n  ]),\n  tableHead: PropTypes.arrayOf(PropTypes.string),\n  tableData: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string))\n};\n"]},"metadata":{},"sourceType":"module"}