{"ast":null,"code":"// ##############################\n// // // javascript library for creating charts\n// #############################\nvar Chartist = require(\"chartist\"); // ##############################\n// // // variables used to create animation on charts\n// #############################\n\n\nvar delays = 80,\n    durations = 500;\nvar delays2 = 80,\n    durations2 = 500; // ##############################\n// // // Vývoj členov\n// #############################\n\nvar dailySalesChart = {\n  data: {\n    labels: [14, 15, 16, 17, 18, 19, 20],\n    series: [[6816, 6826, 7831, 7831, 7305, 7632, 7459]]\n  },\n  options: {\n    lineSmooth: Chartist.Interpolation.cardinal({\n      tension: 0\n    }),\n    low: 0,\n    high: 2030,\n    // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n    chartPadding: {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    }\n  },\n  // for animation\n  animation: {\n    draw: function draw(data) {\n      if (data.type === \"line\" || data.type === \"area\") {\n        data.element.animate({\n          d: {\n            begin: 600,\n            dur: 700,\n            from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),\n            to: data.path.clone().stringify(),\n            easing: Chartist.Svg.Easing.easeOutQuint\n          }\n        });\n      } else if (data.type === \"point\") {\n        data.element.animate({\n          opacity: {\n            begin: (data.index + 1) * delays,\n            dur: durations,\n            from: 0,\n            to: 1,\n            easing: \"ease\"\n          }\n        });\n      }\n    }\n  }\n}; // ##############################\n// // // Email Subscriptions\n// #############################\n\nvar emailsSubscriptionChart = {\n  data: {\n    labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"Mai\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n    series: [[542, 443, 320, 780, 553, 453, 326, 434, 568, 610, 756, 895]]\n  },\n  options: {\n    axisX: {\n      showGrid: false\n    },\n    low: 0,\n    high: 1000,\n    chartPadding: {\n      top: 0,\n      right: 5,\n      bottom: 0,\n      left: 0\n    }\n  },\n  responsiveOptions: [[\"screen and (max-width: 640px)\", {\n    seriesBarDistance: 5,\n    axisX: {\n      labelInterpolationFnc: function labelInterpolationFnc(value) {\n        return value[0];\n      }\n    }\n  }]],\n  animation: {\n    draw: function draw(data) {\n      if (data.type === \"bar\") {\n        data.element.animate({\n          opacity: {\n            begin: (data.index + 1) * delays2,\n            dur: durations2,\n            from: 0,\n            to: 1,\n            easing: \"ease\"\n          }\n        });\n      }\n    }\n  }\n}; // ##############################\n// // // Completed Tasks\n// #############################\n\nvar completedTasksChart = {\n  data: {\n    labels: [\"20\", \"21\", \"22\", \"23\", \"24\"],\n    series: [[12, 5, 5, 2, 2]]\n  },\n  options: {\n    lineSmooth: Chartist.Interpolation.cardinal({\n      tension: 0\n    }),\n    low: 0,\n    high: 15,\n    // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n    chartPadding: {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    }\n  },\n  animation: {\n    draw: function draw(data) {\n      if (data.type === \"line\" || data.type === \"area\") {\n        data.element.animate({\n          d: {\n            begin: 600,\n            dur: 700,\n            from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),\n            to: data.path.clone().stringify(),\n            easing: Chartist.Svg.Easing.easeOutQuint\n          }\n        });\n      } else if (data.type === \"point\") {\n        data.element.animate({\n          opacity: {\n            begin: (data.index + 1) * delays,\n            dur: durations,\n            from: 0,\n            to: 1,\n            easing: \"ease\"\n          }\n        });\n      }\n    }\n  }\n};\nmodule.exports = {\n  dailySalesChart: dailySalesChart,\n  emailsSubscriptionChart: emailsSubscriptionChart,\n  completedTasksChart: completedTasksChart\n};","map":{"version":3,"sources":["/Users/apple/Public/Northflow/e-voting/src/variables/charts.js"],"names":["Chartist","require","delays","durations","delays2","durations2","dailySalesChart","data","labels","series","options","lineSmooth","Interpolation","cardinal","tension","low","high","chartPadding","top","right","bottom","left","animation","draw","type","element","animate","d","begin","dur","from","path","clone","scale","translate","chartRect","height","stringify","to","easing","Svg","Easing","easeOutQuint","opacity","index","emailsSubscriptionChart","axisX","showGrid","responsiveOptions","seriesBarDistance","labelInterpolationFnc","value","completedTasksChart","module","exports"],"mappings":"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","sourcesContent":["// ##############################\n// // // javascript library for creating charts\n// #############################\nvar Chartist = require(\"chartist\");\n\n// ##############################\n// // // variables used to create animation on charts\n// #############################\nvar delays = 80,\n  durations = 500;\nvar delays2 = 80,\n  durations2 = 500;\n\n// ##############################\n// // // Vývoj členov\n// #############################\n\nconst dailySalesChart = {\n  data: {\n    labels: [14,15,16,17,18,19,20],\n    series: [[6816,6826,7831,7831,7305,7632,7459]]\n  },\n  options: {\n    lineSmooth: Chartist.Interpolation.cardinal({\n      tension: 0\n    }),\n    low: 0,\n    high: 2030, // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n    chartPadding: {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    }\n  },\n  // for animation\n  animation: {\n    draw: function(data) {\n      if (data.type === \"line\" || data.type === \"area\") {\n        data.element.animate({\n          d: {\n            begin: 600,\n            dur: 700,\n            from: data.path\n              .clone()\n              .scale(1, 0)\n              .translate(0, data.chartRect.height())\n              .stringify(),\n            to: data.path.clone().stringify(),\n            easing: Chartist.Svg.Easing.easeOutQuint\n          }\n        });\n      } else if (data.type === \"point\") {\n        data.element.animate({\n          opacity: {\n            begin: (data.index + 1) * delays,\n            dur: durations,\n            from: 0,\n            to: 1,\n            easing: \"ease\"\n          }\n        });\n      }\n    }\n  }\n};\n\n// ##############################\n// // // Email Subscriptions\n// #############################\n\nconst emailsSubscriptionChart = {\n  data: {\n    labels: [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"Mai\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\"\n    ],\n    series: [[542, 443, 320, 780, 553, 453, 326, 434, 568, 610, 756, 895]]\n  },\n  options: {\n    axisX: {\n      showGrid: false\n    },\n    low: 0,\n    high: 1000,\n    chartPadding: {\n      top: 0,\n      right: 5,\n      bottom: 0,\n      left: 0\n    }\n  },\n  responsiveOptions: [\n    [\n      \"screen and (max-width: 640px)\",\n      {\n        seriesBarDistance: 5,\n        axisX: {\n          labelInterpolationFnc: function(value) {\n            return value[0];\n          }\n        }\n      }\n    ]\n  ],\n  animation: {\n    draw: function(data) {\n      if (data.type === \"bar\") {\n        data.element.animate({\n          opacity: {\n            begin: (data.index + 1) * delays2,\n            dur: durations2,\n            from: 0,\n            to: 1,\n            easing: \"ease\"\n          }\n        });\n      }\n    }\n  }\n};\n\n// ##############################\n// // // Completed Tasks\n// #############################\n\nconst completedTasksChart = {\n  data: {\n    labels: [\"20\", \"21\", \"22\", \"23\", \"24\"],\n    series: [[12,5,5,2,2]]\n  },\n  options: {\n    lineSmooth: Chartist.Interpolation.cardinal({\n      tension: 0\n    }),\n    low: 0,\n    high: 15, // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n    chartPadding: {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    }\n  },\n  animation: {\n    draw: function(data) {\n      if (data.type === \"line\" || data.type === \"area\") {\n        data.element.animate({\n          d: {\n            begin: 600,\n            dur: 700,\n            from: data.path\n              .clone()\n              .scale(1, 0)\n              .translate(0, data.chartRect.height())\n              .stringify(),\n            to: data.path.clone().stringify(),\n            easing: Chartist.Svg.Easing.easeOutQuint\n          }\n        });\n      } else if (data.type === \"point\") {\n        data.element.animate({\n          opacity: {\n            begin: (data.index + 1) * delays,\n            dur: durations,\n            from: 0,\n            to: 1,\n            easing: \"ease\"\n          }\n        });\n      }\n    }\n  }\n};\n\nmodule.exports = {\n  dailySalesChart,\n  emailsSubscriptionChart,\n  completedTasksChart\n};\n"]},"metadata":{},"sourceType":"module"}