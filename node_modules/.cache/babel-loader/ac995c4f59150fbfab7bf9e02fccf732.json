{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/apple/Public/Northflow/e-voting/src/components/Table/Table.js\";\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\"; // @material-ui/core components\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Button from \"@material-ui/core/Button\"; // core components\n\nimport styles from \"assets/jss/material-dashboard-react/components/tableStyle.js\";\nimport MyModal from \"../Modal/MyModal\";\nimport { ModalManager } from 'react-dynamic-modal';\nimport Axios from \"axios\";\nvar useStyles = makeStyles(styles);\n\nvar openModal = function openModal(question_id, otvorene, hlasoval) {\n  //console.log(\"otvorene\");\n  //console.log(otvorene);\n  var hlavicka = [];\n  var QuestionParams = [];\n  var Odpovede = []; // nacitanie hlavicky otazky name - wording\n\n  Axios.get('http://localhost:4001/questions/get-question/' + question_id).then(function (res) {\n    hlavicka = res.data; //console.log(\"== hlavicka\");\n    //console.log(res.data)\n    //ked sme nacitali hlavicku tak ideme dalej\n    // nacitanie parametrov otazky accept_answ - secret\n\n    Axios.get('http://localhost:4001/questions/getQuestionParams/' + question_id).then(function (res) {\n      QuestionParams = res.data; //console.log(\"prijimam odpovede?\")\n      //console.log(QuestionParams[0].accept_answ)\n      //console.log(QuestionParams[0].accept_answ === 0);\n      //console.log(\"==== big if\")\n      //console.log(QuestionParams[0].accept_answ )\n      //console.log(otvorene)\n      //console.log(QuestionParams[0].accept_answ === 1 && otvorene==='Áno')\n      //console.log(hlasoval)    \n\n      if (QuestionParams[0].accept_answ === 1 && otvorene === 'Áno' && hlasoval === 'Ešte nehlasované') {\n        // nacitanie moznych odpovedi ak je mozne odpovedat\n        Axios.get('http://localhost:4001/questions/getAnswers/' + question_id).then(function (res) {\n          Odpovede = res.data;\n          ModalManager.open( /*#__PURE__*/React.createElement(MyModal, {\n            statsData: \"data\",\n            secret: QuestionParams[0].secret,\n            otv: otvorene,\n            otazka_id: question_id,\n            hlavicka: hlavicka,\n            odpovede: Odpovede,\n            parametre: QuestionParams,\n            onRequestClose: function onRequestClose() {\n              return true;\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 29\n            }\n          }));\n        })[\"catch\"](function (err) {\n          if (err.response) {\n            //TODO: show error response from server\n            window.alert(err.response.data.message); //console.log(err.response.data.message);\n            //this.setState({...this.state,error: err.response.data.message})\n          } else if (err.request) {\n            //TODO: msg internet connection..\n            window.alert(\"Internet connection failed.\");\n          } else {\n            //TODO: rly dont know what error can happend here but can happend :D\n            window.alert(\"Something went wrong.\");\n          }\n        });\n      } else {\n        if (otvorene === 'Nie') {\n          //nacitame statisticke data!!!\n          Axios.get('http://localhost:4001/questions/get-question-stats/' + question_id).then(function (res) {\n            //Odpovede = res.data;\n            //potrebujeme kus spracovat data. \n            var data = {\n              labels: [],\n              series: [[]]\n            };\n            res.data.map(function (item) {\n              data.labels.push(item.answer);\n              data.series[0].push(item.count);\n            });\n            ModalManager.open( /*#__PURE__*/React.createElement(MyModal, {\n              statsData: data,\n              secret: QuestionParams[0].secret,\n              otv: otvorene,\n              otazka_id: question_id,\n              hlavicka: hlavicka,\n              odpovede: \"\",\n              parametre: \"\",\n              onRequestClose: function onRequestClose() {\n                return true;\n              },\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 37\n              }\n            }));\n          })[\"catch\"](function (err) {\n            if (err.response) {\n              //TODO: show error response from server\n              window.alert(err.response.data.message); //console.log(err.response.data.message);\n              //this.setState({...this.state,error: err.response.data.message})\n            } else if (err.request) {\n              //TODO: msg internet connection..\n              window.alert(\"Internet connection failed.\");\n            } else {\n              //TODO: rly dont know what error can happend here but can happend :D\n              window.alert(\"Something went wrong.\");\n            }\n          });\n        } else {\n          if (hlasoval === 'Už zahlasované') {\n            window.alert(\"Už si hlasoval/a.\");\n          }\n        }\n      }\n    })[\"catch\"](function (err) {\n      if (err.response) {\n        //TODO: show error response from server\n        window.alert(err.response.data.message);\n        console.log(err.response.data.message); //this.setState({...this.state,error: err.response.data.message})\n      } else if (err.request) {\n        //TODO: msg internet connection..\n        window.alert(\"Internet connection failed.\");\n      } else {\n        //TODO: rly dont know what error can happend here but can happend :D\n        window.alert(\"Something went wrong.\");\n      }\n    });\n  })[\"catch\"](function (err) {\n    if (err.response) {\n      //TODO: show error response from server\n      window.alert(err.response.data.message);\n      console.log(err.response.data.message); //this.setState({...this.state,error: err.response.data.message})\n    } else if (err.request) {\n      //TODO: msg internet connection..\n      window.alert(\"Internet connection failed.\");\n    } else {\n      //TODO: rly dont know what error can happend here but can happend :D\n      window.alert(\"Something went wrong.\");\n    }\n  }); //console.log(\"QP \"+QuestionParams.accept_answ)\n  //console.log(QuestionParams.accept_answ === 0)\n};\n\nexport default function CustomTable(props) {\n  var classes = useStyles();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 5\n    }\n  });\n  /*\n    const { tableHead, tableData, tableHeaderColor } = props;\n    return (\n      <div className={classes.tableResponsive}>\n        <Table className={classes.table}>\n          {tableHead !== undefined ? (\n            <TableHead className={classes[tableHeaderColor + \"TableHeader\"]} style={{color: \"#019ECE\"}}>\n              <TableRow className={classes.tableHeadRow}>\n                {tableHead.map((prop, key) => {\n                  return (\n                    <TableCell\n                      className={classes.tableCell + \" \" + classes.tableHeadCell}\n                      key={key}\n                    >\n                      {prop}\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            </TableHead>\n          ) : null}\n          <TableBody>\n            { tableData !== undefined ?(\n              tableData.map((propup, key) => {\n                return (\n                  <TableRow key={key} className={classes.tableBodyRow}>\n                      \n                        <TableCell className={classes.tableCell} >\n                          {propup.name}\n                        </TableCell>\n                      \n    \n                    <TableCell className={classes.tableCell} >\n                    <Button onClick={openModal.bind(this, propup.id_question,propup.otvorene,propup.hlasovane)}>DETAIL</Button>\n                    </TableCell>\n                  </TableRow>\n                );\n              })\n            ): null}\n          </TableBody>\n        </Table>\n      </div>\n    ); */\n}\nCustomTable.defaultProps = {\n  tableHeaderColor: \"gray\"\n};\nCustomTable.propTypes = {\n  tableHeaderColor: PropTypes.oneOf([\"warning\", \"primary\", \"danger\", \"success\", \"info\", \"rose\", \"gray\"]),\n  tableHead: PropTypes.arrayOf(PropTypes.string),\n  tableData: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string))\n};","map":{"version":3,"sources":["/Users/apple/Public/Northflow/e-voting/src/components/Table/Table.js"],"names":["React","PropTypes","makeStyles","Table","TableHead","TableRow","TableBody","TableCell","Button","styles","MyModal","ModalManager","Axios","useStyles","openModal","question_id","otvorene","hlasoval","hlavicka","QuestionParams","Odpovede","get","then","res","data","accept_answ","open","secret","err","response","window","alert","message","request","labels","series","map","item","push","answer","count","console","log","CustomTable","props","classes","defaultProps","tableHeaderColor","propTypes","oneOf","tableHead","arrayOf","string","tableData"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n// @material-ui/core components\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Button from \"@material-ui/core/Button\";\n// core components\nimport styles from \"assets/jss/material-dashboard-react/components/tableStyle.js\";\n\nimport MyModal from \"../Modal/MyModal\";\nimport { ModalManager} from 'react-dynamic-modal';\nimport Axios from \"axios\";\n\nconst useStyles = makeStyles(styles);\n\n\nconst openModal = (question_id, otvorene, hlasoval) =>{\n  //console.log(\"otvorene\");\n   //console.log(otvorene);\n  let hlavicka=[];\n  let QuestionParams=[];\n  let Odpovede=[];\n\n  // nacitanie hlavicky otazky name - wording\n  Axios.get('http://localhost:4001/questions/get-question/' + question_id)\n    .then(res => {\n      hlavicka = res.data;\n      //console.log(\"== hlavicka\");\n      //console.log(res.data)\n\n      //ked sme nacitali hlavicku tak ideme dalej\n      // nacitanie parametrov otazky accept_answ - secret\n      Axios.get('http://localhost:4001/questions/getQuestionParams/' + question_id)\n      .then(res => {\n        QuestionParams = res.data;\n        \n        //console.log(\"prijimam odpovede?\")\n        //console.log(QuestionParams[0].accept_answ)\n        //console.log(QuestionParams[0].accept_answ === 0);\n        //console.log(\"==== big if\")\n        //console.log(QuestionParams[0].accept_answ )\n        //console.log(otvorene)\n        //console.log(QuestionParams[0].accept_answ === 1 && otvorene==='Áno')\n        //console.log(hlasoval)    \n        \n        if(QuestionParams[0].accept_answ === 1 && otvorene==='Áno' && hlasoval==='Ešte nehlasované'){\n          // nacitanie moznych odpovedi ak je mozne odpovedat\n            Axios.get('http://localhost:4001/questions/getAnswers/' + question_id)\n            .then(res => {\n              Odpovede = res.data;\n          ModalManager.open(<MyModal statsData=\"data\" secret={QuestionParams[0].secret} otv={otvorene} otazka_id={question_id} hlavicka={hlavicka} odpovede={Odpovede} parametre={QuestionParams} onRequestClose={() => true}/>);\n        \n            })\n            .catch(err => {\n              if (err.response) {\n                //TODO: show error response from server\n                window.alert(err.response.data.message);\n                \n                //console.log(err.response.data.message);\n                //this.setState({...this.state,error: err.response.data.message})\n              } else if (err.request) {\n                //TODO: msg internet connection..\n                window.alert(\"Internet connection failed.\");\n              } else {\n                  //TODO: rly dont know what error can happend here but can happend :D\n                  window.alert(\"Something went wrong.\");\n            }});\n          }else{\n            if(otvorene==='Nie'){\n              //nacitame statisticke data!!!\n              Axios.get('http://localhost:4001/questions/get-question-stats/' + question_id)\n                .then(res => {\n                  //Odpovede = res.data;\n                  //potrebujeme kus spracovat data. \n                  let data={\n                    labels:[],\n                    series:[[]]\n                  }\n                  res.data.map((item)=>{\n                    data.labels.push(item.answer);\n                    data.series[0].push(item.count);\n                  });\n\n                  ModalManager.open(<MyModal statsData={data} secret={QuestionParams[0].secret} otv={otvorene} otazka_id={question_id} hlavicka={hlavicka} odpovede=\"\" parametre=\"\" onRequestClose={() => true}/>);\n              \n                })\n                .catch(err => {\n                  if (err.response) {\n                    //TODO: show error response from server\n                    window.alert(err.response.data.message);\n                    \n                    //console.log(err.response.data.message);\n                    //this.setState({...this.state,error: err.response.data.message})\n                  } else if (err.request) {\n                    //TODO: msg internet connection..\n                    window.alert(\"Internet connection failed.\");\n                  } else {\n                      //TODO: rly dont know what error can happend here but can happend :D\n                      window.alert(\"Something went wrong.\");\n                }});\n            }else{\n              if(hlasoval==='Už zahlasované'){\n                window.alert(\"Už si hlasoval/a.\");\n              }\n            }\n          }\n\n\n      })\n      .catch(err => {\n        if (err.response) {\n          //TODO: show error response from server\n          window.alert(err.response.data.message);\n          \n          console.log(err.response.data.message);\n          //this.setState({...this.state,error: err.response.data.message})\n        } else if (err.request) {\n          //TODO: msg internet connection..\n          window.alert(\"Internet connection failed.\");\n        } else {\n            //TODO: rly dont know what error can happend here but can happend :D\n            window.alert(\"Something went wrong.\");\n      }});\n    })\n    .catch(err => {\n      if (err.response) {\n        //TODO: show error response from server\n        window.alert(err.response.data.message);\n        \n        console.log(err.response.data.message);\n        //this.setState({...this.state,error: err.response.data.message})\n      } else if (err.request) {\n        //TODO: msg internet connection..\n        window.alert(\"Internet connection failed.\");\n      } else {\n          //TODO: rly dont know what error can happend here but can happend :D\n          window.alert(\"Something went wrong.\");\n    }});\n\n    //console.log(\"QP \"+QuestionParams.accept_answ)\n    //console.log(QuestionParams.accept_answ === 0)\n    \n\n\n\n    \n}\n\nexport default function CustomTable(props) {\n  const classes = useStyles();\n  return(\n    <div></div>\n  )\n/*\n  const { tableHead, tableData, tableHeaderColor } = props;\n  return (\n    <div className={classes.tableResponsive}>\n      <Table className={classes.table}>\n        {tableHead !== undefined ? (\n          <TableHead className={classes[tableHeaderColor + \"TableHeader\"]} style={{color: \"#019ECE\"}}>\n            <TableRow className={classes.tableHeadRow}>\n              {tableHead.map((prop, key) => {\n                return (\n                  <TableCell\n                    className={classes.tableCell + \" \" + classes.tableHeadCell}\n                    key={key}\n                  >\n                    {prop}\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          </TableHead>\n        ) : null}\n        <TableBody>\n          { tableData !== undefined ?(\n            tableData.map((propup, key) => {\n              return (\n                <TableRow key={key} className={classes.tableBodyRow}>\n                    \n                      <TableCell className={classes.tableCell} >\n                        {propup.name}\n                      </TableCell>\n                    \n  \n                  <TableCell className={classes.tableCell} >\n                  <Button onClick={openModal.bind(this, propup.id_question,propup.otvorene,propup.hlasovane)}>DETAIL</Button>\n                  </TableCell>\n                </TableRow>\n              );\n            })\n          ): null}\n        </TableBody>\n      </Table>\n    </div>\n  ); */\n}\n\nCustomTable.defaultProps = {\n  tableHeaderColor: \"gray\"\n};\n\nCustomTable.propTypes = {\n  tableHeaderColor: PropTypes.oneOf([\n    \"warning\",\n    \"primary\",\n    \"danger\",\n    \"success\",\n    \"info\",\n    \"rose\",\n    \"gray\"\n  ]),\n  tableHead: PropTypes.arrayOf(PropTypes.string),\n  tableData: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string))\n};\n"]},"metadata":{},"sourceType":"module"}